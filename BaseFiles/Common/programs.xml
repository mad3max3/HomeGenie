<?xml version="1.0" encoding="utf-8"?>
<ArrayOfProgramBlock xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ProgramBlock>
    <ConditionType>OnSwitchTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{
  Program.UseWidget("homegenie/generic/program");
});</ScriptCondition>
    <ScriptSource>//OPTIONS_STRING_PROMPT=Enter Group Name:
// ^^^^^^^
// the line above is a special line that tells homegenie
// to ask for options input (to enter a group name in this specific case)
// when program is manually run by user
// NOTE: no white space allowed for OPTIONS_STRING_PROMPT line
// that must be the FIRST line of code.
Modules
  .InGroup( PROGRAM_OPTIONS_STRING )
  .OfDeviceType("Light,Dimmer")
  //.IterationDelay(0.35)
  .On();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>6</Address>
    <Name>Group Lights ON</Name>
    <Description>Turn on all the lights in the current group.</Description>
    <Group>Scenes</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnSwitchTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{
  Program.UseWidget("homegenie/generic/program");
});
</ScriptCondition>
    <ScriptSource>//OPTIONS_STRING_PROMPT=Enter Group Name:
// ^^^^^^^
// the line above is a special line that tells homegenie
// to ask for options input (to enter a group name in this specific case)
// when program is manually run by user
// NOTE: no white space allowed for OPTIONS_STRING_PROMPT line
// that must be the FIRST line of code.

Modules
  .InGroup( PROGRAM_OPTIONS_STRING )
  .OfDeviceType("Light,Dimmer")
  //.IterationDelay(0.35)
  .Off();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>7</Address>
    <Name>Group Lights OFF</Name>
    <Description>Turn off all the lights in the current group.</Description>
    <Group>Scenes</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("", "Dimmer", "HomeGenie.LevelMemory", "Recall last light level when switched on", "checkbox");
Program.AddFeature("", "Dimmer", "HomeGenie.LevelMemory.SimulateOnly", "Simulate only", "checkbox");
Program.Run();
</ScriptCondition>
    <ScriptSource>When.ModuleParameterChanged( (module, property) =&gt; {
  // stores the Status.MemoryLevel value for recalling last light dimmer level
  // when switched on
  if (module.HasFeature("HomeGenie.LevelMemory") &amp;&amp; module.IsOfDeviceType("Dimmer") &amp;&amp; property.Name == "Status.Level")
  {
    var level = module.Parameter("Status.Level");
    var memory = module.Parameter("Status.MemoryLevel");
    //
    if (level.DecimalValue != level.Statistics.Last.Value)
    {
      bool justswitchedon = (level.Statistics.Last.Value == 0 &amp;&amp; level.DecimalValue &gt; 0);
      if (justswitchedon)
      {
        // set current level to memory level if different
        if (level.DecimalValue != memory.DecimalValue &amp;&amp; memory.DecimalValue &gt; 0)
        {
          var newlevel = (int)(memory.DecimalValue * 100);
          if (module.HasFeature("HomeGenie.LevelMemory.SimulateOnly"))
          {
            Program.RaiseEvent(module, "Status.Level", memory.Value, "Memory Level");
          }
          else
          {
            module.Level = newlevel; 
          }
          Program.Notify("Level Memory", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " set to " + newlevel + "%");
          // returning false, prevent from routing event to other listeners                  
          return false;
        }
      }
      if (level.DecimalValue &gt; 0) 
      {
        memory.Value = level.Value;
      } 
    }
  }
  // returning true, will route event to other listeners
  return true; 
});
Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>16</Address>
    <Name>Level Memory</Name>
    <Description>Store and recall last dimmer level when device is switched on.</Description>
    <Group>Lights</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Dimmer</ForTypes>
        <Property>HomeGenie.LevelMemory</Property>
        <Description>Recall last light level when switched on</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Dimmer</ForTypes>
        <Property>HomeGenie.LevelMemory.SimulateOnly</Property>
        <Description>Simulate only</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2016-01-22T17:32:08.300514Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("BridgeAddress", "192.168.0.?", "Philips Hue Bridge IP Address", "text");
Program.AddOption("BridgeUsername","newdeveloper", "Philips Hue Bridge API username", "text");
// Create 5 virtual modules with the domain "HomeAutomation.PhilipsHue" and with address from 1 to 5
// "Dimmer" is the type and "GenericColorLight" is the widget to be used to display the virtual module
// See directory "html/pages/control/widgets/" for widget list
Program.AddVirtualModules("HomeAutomation.PhilipsHue", "Dimmer", "homegenie/generic/colorlight", 1, 5);
Program.Run();
</ScriptCondition>
    <ScriptSource>Func&lt;string, string, bool&gt; bridgeapicall = (string lightnum, string jsonargs) =&gt; 
{
  if (Program.Option("BridgeAddress").Value == "" || Program.Option("BridgeAddress").Value.EndsWith("?"))
  {
    return false;
  }
  string webserviceurl = "http://" + 
    Program.Option("BridgeAddress").Value + "/api/" + 
    Program.Option("BridgeUsername").Value + "/lights/" + lightnum + "/state";
  Net.WebService(webserviceurl).Put( jsonargs ).Call();
  return true;
};

var GetHsb = new Func&lt;string,dynamic&gt;((hsb)=&gt;{
  dynamic color = new ExpandoObject();
  string[] parts = hsb.Split(',');
  color.H = (parts[0] != "" ? parts[0] : "1");
  color.S = (parts.Length &gt; 1 &amp;&amp; parts[1] != "" ? parts[1] : "0");
  color.B = (parts.Length &gt; 2 &amp;&amp; parts[2] != "" ? parts[2] : "1");
  return color;
});

// - http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/...
When.WebServiceCallReceived("HomeAutomation.PhilipsHue", ( args ) =&gt; {
  string[] reqs = ((string)args).Split('/');
  //string domain = reqs[0];
  try
  {
    string lightnumber = reqs[1];
    string command = reqs[2];
    string parameter = ""; if (reqs.Length &gt; 3) parameter = Uri.UnescapeDataString(reqs[3]);
    //
	var hueModules = Modules.InDomain("HomeAutomation.PhilipsHue");
    var module = hueModules.WithAddress(lightnumber).Get();
    //
    switch(command)
    {
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.On
      case "Control.On":
        {
          bridgeapicall(lightnumber, "{ \"on\" : true }");
          var color = GetHsb(module.Parameter("Status.ColorHsb").Value);
          Program.RaiseEvent(module, "Status.Level", color.B, "Hue Light");
        }
        break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.Off
      case "Control.Off":
        bridgeapicall(lightnumber, "{ \"on\" : false }");
        Program.RaiseEvent(module, "Status.Level", "0", "Hue Light");
        break;
      case "Control.Toggle":
        if (module.Parameter("Status.Level").DecimalValue == 0)
        {
          bridgeapicall(lightnumber, "{ \"on\" : true }");
          var color = GetHsb(module.Parameter("Status.ColorHsb").Value);
          Program.RaiseEvent(module, "Status.Level", color.B, "Hue Light");
        }
        else
        {
          bridgeapicall(lightnumber, "{ \"on\" : false }");
          Program.RaiseEvent(module, "Status.Level", "0", "Hue Light");
        }
        break;
      case "Control.Level":
        {
          if (module.IsOff) bridgeapicall(lightnumber, "{ \"on\" : true }");
          bridgeapicall(lightnumber, "{ \"bri\" : " + ((int)(double.Parse(parameter) * 2.5)).ToString(CultureInfo.InvariantCulture) + " }");
          var color = GetHsb(module.Parameter("Status.ColorHsb").Value);
          var bri = (double.Parse(parameter) / 100D).ToString(CultureInfo.InvariantCulture);
          Program.RaiseEvent(module, "Status.ColorHsb", color.H+','+color.S+','+bri, "Hue Light");
          Program.RaiseEvent(module, "Status.Level", bri, "Hue Light");
        }
        break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.ColorHsb/&lt;hue&gt;,&lt;sat&gt;,&lt;bri&gt;
      case "Control.ColorHsb":
        string[] values = parameter.Split(',');
        double transition = 5;
        if (values.Length &gt; 3) transition = ((int)(double.Parse(values[3]) * 10)); 
        bridgeapicall(lightnumber, "{ \"on\" : true" + 
                      ", \"hue\" : " + (int)(double.Parse(values[0], CultureInfo.InvariantCulture) * 65536) + 
                      ", \"sat\" : " + (int)(double.Parse(values[1], CultureInfo.InvariantCulture) * 255) + 
                      ", \"bri\" : " + (int)(double.Parse(values[2], CultureInfo.InvariantCulture) * 255) + 
                      ", \"transitiontime\" : " + transition.ToString() +  "}");
        Program.RaiseEvent(module, "Status.Level", (double.Parse(values[2], CultureInfo.InvariantCulture)).ToString(), "Hue Light");
        Program.RaiseEvent(module, "Status.ColorHsb", parameter, "Hue Light");
        break; 
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.Alert/Long
      case "Control.Alert":
        // eg. Modules.WithName("Light 1").Command("Control.Alert").Set(""); for a short alert Set("Long"); for a 30 second alert
        string alertType = "select";
        if (parameter == "Long") {alertType = "lselect";}
        bridgeapicall(lightnumber, "{\"alert\" : \"" + alertType + "\"}");
        break; 
    }
    //
    return "{ 'ResponseValue' : 'OK' }";    
  } catch (Exception e) { 

    Program.Notify("Philips Hue ERROR!", e.Message);

  }
  return "{ 'ResponseValue' : 'ERROR' }";
});

Program.GoBackground();
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>26</Address>
    <Name>Philips Hue Bridge</Name>
    <Description>Adds Philips Hue lights control capability to HomeGenie. 
In order for this to work, you must register "homegenie" username
(default is "newdeveloper") with your Philips Hue Bridge first.
For instructions see: http://developers.meethue.com/gettingstarted.html .</Description>
    <Group>Devices and Things</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2016-01-22T17:32:08.114183Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{
  // list the program as custom weather widget
  Program.UseWidget( "weather/wunderground/conditions" );
  // set input fields parameters
  // &lt;field_name&gt;, &lt;default_value&gt;, &lt;description&gt;
  Program.AddOption("Location", "autoip", "City name", "text");
  Program.AddOption("Language", "EN", "Language", "text");
  Program.AddOption("ApiKey", "?", "Weather Underground Key", "text");
  Program.AddOption("UpdateInterval", "30", "Update interval (minutes)", "text");
});

// initialize widget program parameters
Program.Parameter("Astronomy.Sunset").Value = "";
Program.Parameter("Astronomy.Sunrise").Value = "";
Program.Parameter("Conditions.City").Value = "";
Program.Parameter("Conditions.TemperatureC").Value = "";
Program.Parameter("Conditions.TemperatureF").Value = "";
Program.Parameter("Conditions.DisplayLocation").Value = "";
Program.Parameter("Conditions.IconUrl").Value = "";
Program.Parameter("Conditions.Description").Value = "";    

Program.Run();
</ScriptCondition>
    <ScriptSource>var sunsetEvent = "Sunset";
var sunriseEvent = "Sunrise";
var sunsetToSunriseEvent = "FromSunsetToSunrise";
var sunriseToSunsetEvent = "FromSunriseToSunset";

while (Program.IsEnabled)
{
  string location = Program.Option("Location").Value;
  string language = Program.Option("Language").Value;
  string apikey = Program.Option("ApiKey").Value;

  if (!apikey.Contains("?"))
  {
    try
    {

      string webserviceurl = "http://api.wunderground.com/api/" + apikey + "/geolookup/astronomy/lang:" + language + "/q/" + location + ".json";
      var astronomydata = Net.WebService(webserviceurl).GetData();

      int sunrise_hour = int.Parse(astronomydata.moon_phase.sunrise.hour.ToString());
      int sunrise_minute = int.Parse(astronomydata.moon_phase.sunrise.minute.ToString());
      int sunset_hour = int.Parse(astronomydata.moon_phase.sunset.hour.ToString());
      int sunset_minute = int.Parse(astronomydata.moon_phase.sunset.minute.ToString());

      Program.Parameter("Astronomy.Sunset").Value = sunset_hour.ToString("D2") + ":" + sunset_minute.ToString("D2");
      Program.Parameter("Astronomy.Sunrise").Value = sunrise_hour.ToString("D2") + ":" + sunrise_minute.ToString("D2");

      // Update Scheduler entries
      Scheduler
        .WithName(sunsetEvent)
        .SetSchedule(String.Format("{0} {1} * * *", sunset_minute, sunset_hour));
      Scheduler
        .WithName(sunriseEvent)
        .SetSchedule(String.Format("{0} {1} * * *", sunrise_minute, sunrise_hour));
      Scheduler
        .WithName(sunsetToSunriseEvent)
        .SetSchedule(String.Format("(* {0}-23 * * *):({1}-59 {2} * * *):(* 0-{3} * * *):(0-{4} {5} * * *)", (sunset_hour+1), sunset_minute, sunset_hour, (sunrise_hour-1), sunrise_minute, sunrise_hour));
      Scheduler
        .WithName(sunriseToSunsetEvent)
        .SetSchedule(String.Format("({0}-59 {1} * * *):(* {2}-{3} * * *):(0-{4} {5} * * *)", sunrise_minute, sunrise_hour, (sunrise_hour+1), sunset_hour, sunset_minute, sunset_hour));

      webserviceurl = "http://api.wunderground.com/api/" + apikey + "/geolookup/conditions/lang:" + language + "/q/" + location + ".json";
      var weatherdata = Net.WebService(webserviceurl).GetData();

      string city = weatherdata.location.city;
      string country = weatherdata.location.country;
      string country_iso3166 = weatherdata.location.country_iso3166; // eg. IT,US,NL,UK,AU,CH,DE...
      string temperaturec = weatherdata.current_observation.temp_c;
      string temperaturef = weatherdata.current_observation.temp_f;
      string display_location = weatherdata.current_observation.display_location.full;
      string weather_text = weatherdata.current_observation.weather;
      string icon = weatherdata.current_observation.icon;
      string icon_url = weatherdata.current_observation.icon_url.ToString().Replace("c/k", "c/e").Replace("http://icons.wxug", "https://api.wunderground");
      string wind_dir = weatherdata.current_observation.wind_dir;
      string wind_kph = weatherdata.current_observation.wind_kph;
      string pressure_mb = weatherdata.current_observation.pressure_mb;
      string feelslike_c = weatherdata.current_observation.feelslike_c;
      string feelslike_f = weatherdata.current_observation.feelslike_f;
      string UV = weatherdata.current_observation.UV;
      string precip_1hr_metric = weatherdata.current_observation.precip_1hr_metric;

      // 2014-01-22 - Added to allow the widget to display the date/time.
      string last_updated = weatherdata.current_observation.observation_time; //DateTime.Now.ToString("g"); //, new System.Globalization.CultureInfo("en-US")

      Program.Parameter("Conditions.City").Value = city;
      Program.Parameter("Conditions.Country").Value = country;
      Program.Parameter("Conditions.CountryCode").Value = country_iso3166;
      Program.Parameter("Conditions.TemperatureC").Value = temperaturec;
      Program.Parameter("Conditions.TemperatureF").Value = temperaturef;
      Program.Parameter("Conditions.DisplayLocation").Value = display_location;
      Program.Parameter("Conditions.Description").Value = weather_text;
      Program.Parameter("Conditions.IconUrl").Value = icon_url;
      Program.Parameter("Conditions.Status").Value = icon; // eg. cloudy, sunny, etc..
      Program.Parameter("Conditions.WindDirection").Value = wind_dir;
      Program.Parameter("Conditions.WindKph").Value = wind_kph;
      Program.Parameter("Conditions.PressureMb").Value = pressure_mb;
      Program.Parameter("Conditions.FeelsLikeC").Value = feelslike_c;
      Program.Parameter("Conditions.FeelsLikeF").Value = feelslike_f;
      Program.Parameter("Conditions.UV").Value = UV;
      Program.Parameter("Conditions.PrecipitationHourMetric").Value = precip_1hr_metric;

      // 2014-01-22 - Added to allow the widget to display the date/time.
      Program.Parameter("Conditions.LastUpdated").Value = last_updated;

      // 2015-01-30 - Added forecast of next 3 days
      webserviceurl = "http://api.wunderground.com/api/" + apikey + "/forecast/lang:" + language + "/q/" + location + ".json";
      var forecastData = Net.WebService(webserviceurl).GetData().forecast.simpleforecast.forecastday;
      // Collect forecast data
      for (int d = 1; d &lt;= 3; d++)
      {
        Program.Parameter("Conditions.Forecast." + d + ".Description").Value = forecastData[d].conditions.ToString();
        Program.Parameter("Conditions.Forecast." + d + ".Year").Value = forecastData[d].date.year.ToString();
        Program.Parameter("Conditions.Forecast." + d + ".Month").Value = forecastData[d].date.monthname.ToString();
        Program.Parameter("Conditions.Forecast." + d + ".Day").Value = forecastData[d].date.day.ToString();
        Program.Parameter("Conditions.Forecast." + d + ".Weekday").Value = forecastData[d].date.weekday.ToString();
        Program.Parameter("Conditions.Forecast." + d + ".IconUrl").Value = forecastData[d].icon_url.ToString().Replace("c/k", "c/e").Replace("http://icons.wxug", "https://api.wunderground");
        Program.Parameter("Conditions.Forecast." + d + ".TemperatureC.Low").Value = forecastData[d].low.celsius.ToString();
        Program.Parameter("Conditions.Forecast." + d + ".TemperatureF.Low").Value = forecastData[d].low.fahrenheit.ToString();
        Program.Parameter("Conditions.Forecast." + d + ".TemperatureC.High").Value = forecastData[d].high.celsius.ToString();
        Program.Parameter("Conditions.Forecast." + d + ".TemperatureF.High").Value = forecastData[d].high.fahrenheit.ToString();
      }

      Program.RaiseEvent("Program.UiRefresh", "Data Updated", "");
      //Program.Notify("Weather Underground", "Updated.");

    } 
    catch (Exception e) 
    {

      Program.Notify("Weather Underground ERROR!", "Unable to get data from service. " + e.Message);
      //Program.Parameter("Conditions.City").Value = "ERROR: " + e.Message;
      Console.WriteLine( e.Message );
      Pause(10);

    }
  }
  //
  var delayMins = Program.Option("UpdateInterval").DecimalValue;
  if (delayMins &lt; 1) delayMins = 1;
  var pauseEnd = DateTime.Now.AddMinutes(delayMins);
  var sunEventParameter = Program.Parameter("Sun.Event");
  do
  {
    if (Scheduler.IsScheduling("@Sunrise") &amp;&amp; sunEventParameter.Value != sunriseEvent)
    {
      Program.RaiseEvent(sunEventParameter.Name, sunriseEvent, sunriseEvent + " event");
    }
    else if (Scheduler.IsScheduling("@Sunset") &amp;&amp; sunEventParameter.Value != sunsetEvent)
    {
      Program.RaiseEvent(sunEventParameter.Name, sunsetEvent, sunsetEvent + " event");
    }
    Pause(60-DateTime.Now.Second);
  } while (Program.IsEnabled &amp;&amp; DateTime.Now.Ticks &lt;= pauseEnd.Ticks);
}</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>34</Address>
    <Name>Weather Underground</Name>
    <Description>Current weather, forecast and sunrise/sunset information from &lt;strong&gt;Weather Underground&lt;/strong&gt; service. 
To activate this widget specify a valid user &lt;strong&gt;Key&lt;/strong&gt; that can be obtained creating an account from &lt;u&gt;http://www.wunderground.com/weather/api/d/login.html&lt;/u&gt;</Description>
    <Group>Weather and Environment</Group>
    <Features />
    <ActivationTime>2016-01-22T17:33:08.183785Z</ActivationTime>
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("", "Light,Dimmer,Switch,Shutter", "HomeGenie.ScheduleControl", "Control device on a given schedule", "checkbox");
Program.AddFeature("", "Light,Dimmer,Switch,Shutter", "HomeGenie.ScheduleOn", "Turn On", "cron.text");
Program.AddFeature("", "Light,Dimmer,Switch,Shutter", "HomeGenie.ScheduleOff", "Turn Off", "cron.text");
Program.Run();
</ScriptCondition>
    <ScriptSource>var controlModules = Modules.WithFeature("HomeGenie.ScheduleControl");

while (Program.IsEnabled)
{

  controlModules.Each((module)=&gt;{

    var scheduleOn = module.Parameter("HomeGenie.ScheduleOn").Value;
    var scheduleOff = module.Parameter("HomeGenie.ScheduleOff").Value;

    if (Scheduler.IsScheduling(scheduleOn))
    {
      Program.Notify("Scheduled Control", module.Instance.Name + " ON");
      module.On();
    }

    if (Scheduler.IsScheduling(scheduleOff))
    {
      Program.Notify("Scheduled Control", module.Instance.Name + " OFF");
      module.Off();
    }

    return false;
  });

  var pause = (60 - DateTime.Now.Second);
  Pause(pause);

}</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>35</Address>
    <Name>Scheduled ON/OFF</Name>
    <Description>Turn on/off a device using HG scheduler.</Description>
    <Group>Scheduling</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Light,Dimmer,Switch,Shutter</ForTypes>
        <Property>HomeGenie.ScheduleControl</Property>
        <Description>Control device on a given schedule</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>cron.text</FieldType>
        <ForDomains />
        <ForTypes>Light,Dimmer,Switch,Shutter</ForTypes>
        <Property>HomeGenie.ScheduleOn</Property>
        <Description>Turn On</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>cron.text</FieldType>
        <ForDomains />
        <ForTypes>Light,Dimmer,Switch,Shutter</ForTypes>
        <Property>HomeGenie.ScheduleOff</Property>
        <Description>Turn Off</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2016-01-22T17:32:08.223985Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("PollInterval", "15", "Poll Interval (seconds)", "text");
Program.AddFeature("HomeAutomation.ZWave", "Light,Dimmer,Switch,Shutter", "HomeGenie.ZWaveLevelPoll", "Poll module level", "checkbox");
Program.Run();
</ScriptCondition>
    <ScriptSource>while (Program.IsEnabled)
{
  // basic get will returns current device level 
  Modules.WithFeature("HomeGenie.ZWaveLevelPoll").Each((module) =&gt; {
    //Program.Notify("Z-Wave Level Poll", "Polling node " + module.Instance.Address + "&lt;br&gt;" + module.Instance.Name);
    var nif = "";
    // node information frame
    if (module.HasParameter("ZWaveNode.NodeInfo"))
      nif = (" " + module.Parameter("ZWaveNode.NodeInfo").Value + " ");
    if (nif.Contains(" 26 ")) // 0x26 Switch MultiLevel
    {
      module.Command("SwitchMultilevel.Get").Execute();
    }
    else if (nif.Contains(" 25 ")) // 0x25 Switch Binary
    {
      module.Command("SwitchBinary.Get").Execute();
    }
    else
    {
      module.Command("Basic.Get").Execute();
    }
    return false; // do not break, continue iterating...
  });
  // pause between each poll
  var delay = Program.Option("PollInterval").DecimalValue;
  if (delay &lt; 5) delay = 5;
  Pause(delay);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>39</Address>
    <Name>Level Poll</Name>
    <Description>Periodically query lights and switches level.</Description>
    <Group>Z-Wave</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("CellAddress", "192.168.0.?", "1. Remote HG server address", "text");
Program.AddOption("CellUsername", "", "2. Username", "text");
Program.AddOption("CellPassword", "", "3. Password", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  var celladdress  = Program.Option("CellAddress").Value;
  var cellusername = Program.Option("CellUsername").Value;
  var cellpassword = Program.Option("CellPassword").Value;
  // ROUTE IR/RF EVENT TO REMOTE HG CELL
  if (!celladdress.Contains("?") &amp;&amp; property.Name == "Receiver.RawData")
  {
    Net
      .WithCredentials(cellusername, cellpassword)
      .SignalModuleEvent(celladdress, module, property);
  }
  // returning true, will route event to other listeners
  return true;  
});
//
Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>73</Address>
    <Name>IR/RF remote control events forwarding</Name>
    <Description>Forwards received IR/RF remote input to another HomeGenie box.</Description>
    <Group>Interconnections</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("CellAddress", "192.168.0.?", "1. Remote HG server address", "text");
Program.AddOption("CellUsername", "", "2. Username", "text");
Program.AddOption("CellPassword", "", "3. Password", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  var celladdress  = Program.Option("CellAddress").Value;
  var cellusername = Program.Option("CellUsername").Value;
  var cellpassword = Program.Option("CellPassword").Value;
  // ROUTE IR/RF EVENT TO REMOTE HG CELL
  if (!celladdress.Contains("?") &amp;&amp; property.Name == "Meter.Watts")
  {
    Net
      .WithCredentials(cellusername, cellpassword)
      .SignalModuleEvent(celladdress, module, property);
  }
  // returning true, will route event to other listeners
  return true;
});
//
Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>74</Address>
    <Name>Meter.Watts events forwarding</Name>
    <Description>Forwards received Meter.Watts report to another HomeGenie box.</Description>
    <Group>Interconnections</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("CellAddress", "192.168.0.?", "1. Remote HG server address", "text");
Program.AddOption("CellUsername", "", "2. Username", "text");
Program.AddOption("CellPassword", "", "3. Password", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  var celladdress  = Program.Option("CellAddress").Value;
  var cellusername = Program.Option("CellUsername").Value;
  var cellpassword = Program.Option("CellPassword").Value;
  // ROUTE METERING EVENT TO REMOTE HG CELL
  if (!celladdress.Contains("?") &amp;&amp; property.Name.StartsWith("Status."))
  {
    Net
      .WithCredentials(cellusername, cellpassword)
      .SignalModuleEvent(celladdress, module, property);
  }
  // returning true, will route event to other listeners
  return true;
});
//
Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>75</Address>
    <Name>Status.Level events forwarding</Name>
    <Description>Forwards module Status.* events to another HomeGenie box.</Description>
    <Group>Interconnections</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("", "Dimmer", "EnergyManagement.EnergySavingMode", "Energy Saving Mode enabled light", "checkbox");
Program.AddFeature("", "Dimmer", "EnergyManagement.EnergySavingLevel", "Keep level below this value (%)", "slider:20:80:1");
Program.Run();
</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  if (module.HasFeature("EnergyManagement.EnergySavingMode") &amp;&amp; module.IsOfDeviceType("Dimmer") &amp;&amp; property.Name == "Status.Level")
  {
    var level = module.Parameter("Status.Level");
    var newlevel = module.Parameter("EnergyManagement.EnergySavingLevel").DecimalValue;
    if (newlevel &lt;= 0)
    {
      module.Parameter("EnergyManagement.EnergySavingLevel").Value = "40";
      newlevel = 40;
    }
    //
    if (level.DecimalValue &gt; (newlevel / 100D)) 
    {
      Program.Notify("Energy Saving Mode", module.Instance.Address + "&lt;br&gt;" + module.Instance.Name + " set to " + newlevel + "%");
      module.Level = newlevel;
      return false;
    }
  }
  // returning true, will route event to other listeners
  return true;
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>82</Address>
    <Name>Energy Saving Mode</Name>
    <Description>When enabled, ensures that dimmer level is kept below a given percentage value.</Description>
    <Group>Energy Management</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Dimmer</ForTypes>
        <Property>EnergyManagement.EnergySavingMode</Property>
        <Description>Energy Saving Mode enabled light</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:20:80:1</FieldType>
        <ForDomains />
        <ForTypes>Dimmer</ForTypes>
        <Property>EnergyManagement.EnergySavingLevel</Property>
        <Description>Keep level below this value (%)</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2016-01-22T17:32:08.384178Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("HomeAutomation.X10", "Dimmer", "X10.LevelFix", "Set level to 100% when switched on", "checkbox");
Program.Run();
</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterIsChanging( (module, property) =&gt; {
  if (module.HasFeature("X10.LevelFix") &amp;&amp; module.IsOfDeviceType("Dimmer") &amp;&amp; property.Name == "Status.Level")
  {
    var level = module.Parameter("Status.Level");
    var lastlevel = module.Parameter("Status.LastLevel");
    //
    bool justswitchedon = (level.DecimalValue &gt; 0 &amp;&amp; lastlevel.DecimalValue == 0);
    lastlevel.Value = level.Value;
    if (justswitchedon)
    {
      Program.Notify("X10 Auto Bright", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " set to 100%");
      module.Command("Control.Bright").Set("100");
      return false; // &lt;-- prevent ModuleParameterChanged event from being fired
    }
  }
  return true; // &lt;-- continue routing event to other listeners
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>84</Address>
    <Name>Set to 100% when switched on</Name>
    <Description>Brighten a light to 100% when switched on.</Description>
    <Group>X10</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>HomeAutomation.X10</ForDomains>
        <ForTypes>Dimmer</ForTypes>
        <Property>X10.LevelFix</Property>
        <Description>Set level to 100% when switched on</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2016-01-22T17:32:08.142987Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddVirtualModules("Media.IpCamera", "Sensor", "homegenie/generic/camerainput", 1, 10);
Program.AddFeature("Media.IpCamera", "Sensor", "IpCamera.ImageURL", "Camera image API URL (see your camera docs)", "text");
Program.AddFeature("Media.IpCamera", "Sensor", "IpCamera.Username", "Username (optional)", "text");
Program.AddFeature("Media.IpCamera", "Sensor", "IpCamera.Password", "Password (optional)", "password");
Program.Run();
</ScriptCondition>
    <ScriptSource>var cameraModules = Modules.InDomain("Media.IpCamera");
for (int cam = 1; cam &lt; 10; cam++)
{
  var module = cameraModules.WithAddress(cam.ToString()).Get();
  module.Parameter("Image.URL").Value = "/api/Media.IpCamera/" + cam.ToString() + "/Camera.GetPicture/";
}

// - http://&lt;hg_address&gt;/api/Media.IpCamera/&lt;program_address&gt;/...
When.WebServiceCallReceived("Media.IpCamera/", ( args ) =&gt; {
  string[] reqs = ((string)args).Split('/');
  //string domain = reqs[0];
  object data = "{ 'ResponseValue' : 'ERROR' }";
  try
  {
    string cameraaddress = reqs[1];
    string command = reqs[2];
    //string parameter = ""; if (reqs.Length &gt; 3) parameter = reqs[3];
    var module = cameraModules.WithAddress(cameraaddress).Get();
    //
    switch(command)
    {
      // eg. http://&lt;hg_address&gt;/api/Media.IpCamera/&lt;program_address&gt;/Camera.GetPicture
      case "Camera.GetPicture":
      data = Net
        .WebService(module.Parameter("IpCamera.ImageURL").Value)
        .WithCredentials(module.Parameter("IpCamera.Username").Value, module.Parameter("IpCamera.Password").Value)
        .GetBytes();
      break;
      case "Camera.MotionDetected":
      data = "{ 'ResponseValue' : 'OK' }";
      // blink Sensor.MotionDetect parameter
      Program.RaiseEvent(module, "Sensor.MotionDetect", "255", "Generic IP Camera");
      Pause(1);
      Program.RaiseEvent(module, "Sensor.MotionDetect", "0", "Generic IP Camera");
      break;
    }
  } catch (Exception e) { 

    Program.Notify("IpCamera ERROR!", e.Message);

  }
  return data;
});

Program.GoBackground();
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>88</Address>
    <Name>Generic IP Camera</Name>
    <Description>Generic IP Camera driver.</Description>
    <Group>Devices and Things</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.UseWidget("homegenie/generic/securitysystem");

Program.AddFeature("", "Sensor,DoorWindow,DoorLock", "HomeGenie.SecuritySensor", "Use as Security Sensor", "checkbox");
Program.AddFeature("", "Sensor,DoorWindow,DoorLock", "HomeGenie.SecurityTriggerHome", "Also trigger when armed Home", "checkbox");
Program.AddFeature("", "Siren,Light,Dimmer,Switch", "HomeGenie.SecurityAlarm", "Use as Security Alarm", "checkbox");

Program.AddOption("System.ArmDelay", "10", "1. Arm Delay (seconds)", "text");
Program.AddOption("System.SirenStartTime", "0", "2. Sirens Start Delay (seconds)", "text");
Program.AddOption("System.SirenMaxTime", "30", "3. Sirens Max Time (seconds, 0=infinite)", "text");

Program.AddOption("Email.Recipients", "", "4. Comma separated list of recipients e-mails for alarm notifications", "text");

Program.AddOption("Trigger.ArmedProgram", "", "5. Program to run when armed", "text");
Program.AddOption("Trigger.DisarmedProgram", "", "6. Program to run when disarmed", "text");
Program.AddOption("Trigger.TriggeredProgram", "", "7. Program to run when triggered", "text");

Program.Run();
</ScriptCondition>
    <ScriptSource>//
// init program parameters
//
var STATUS_DISARMED = "Disarmed";
var STATUS_ARMED_AWAY = "Away";
var STATUS_ARMED_HOME = "Home";

Program.RaiseEvent("HomeGenie.SecurityArmed", STATUS_DISARMED, "Security System");
Program.Parameter("HomeGenie.SecurityTriggered").Value = "0";
Program.Parameter("Status.Level").Value = "0";

// Events History
var history = new List&lt;dynamic&gt;();
var historyLimit = 24; // hours
var AddHistoryEvent = new Action&lt;Module, ModuleParameter&gt;((mod, param)=&gt;{
  dynamic evt = new ExpandoObject();
  evt.Domain = mod.Domain;
  evt.Address = mod.Address;
  evt.Name = mod.Name;
  evt.Parameter = param.Name;
  evt.Value = param.Value;
  evt.Timestamp = param.UpdateTime;
  // remove any previous event of the same type (the history only keep the last occurrence of a same event)
  history.RemoveAll(e =&gt; e.Domain == evt.Domain &amp;&amp; e.Address == evt.Address &amp;&amp; e.Parameter == evt.Parameter &amp;&amp; e.Value == evt.Value);    
  history.Add(evt);
  // keeep size within historyLimit (minutes)
  while ((DateTime.UtcNow - history[history.Count - 1].Timestamp).TotalHours &gt; historyLimit)
  {
    history.RemoveAll(sv =&gt; (DateTime.UtcNow - sv.Timestamp).TotalHours &gt; historyLimit);
  }
  // this event will cause the widget to update its data
  Program.RaiseEvent("Program.UiRefresh", "Log updated", "");
});

var _armdisarm = new Action&lt;bool&gt;((armHome)=&gt;{
  Program.RunAsyncTask(()=&gt; {
    if (Program.Parameter("Status.Level").Value == "0")
    {
      // disarming
      Program.RaiseEvent("HomeGenie.SecurityTriggered", "0", "Security System");
    }
    else
    {
      // arming
      Pause( Program.Option("System.ArmDelay").DecimalValue );
    }
    var status = "";
    if (Program.Parameter("Status.Level").Value == "0")
      status = STATUS_DISARMED;
    else
      status = (armHome ? STATUS_ARMED_HOME : STATUS_ARMED_AWAY);
    Program.RaiseEvent("HomeGenie.SecurityArmed", status, "Security System");
    // run armed/disarmed program
    if (Program.Parameter("Status.Level").Value != "0")
    {
      var armedProgram = Program.Option("Trigger.ArmedProgram").Value;
      if (armedProgram != "")
      {
        Program.Run(armedProgram);
      }
    }
    else
    {
      var disarmedProgram = Program.Option("Trigger.DisarmedProgram").Value;
      if (disarmedProgram != "")
      {
        Program.Run(disarmedProgram);
      }
    }
  });
});

// module events handling
When.ModuleParameterChanged((module, parameter)=&gt; {
  bool moduleAlarmed = false;
  if (module.HasFeature("HomeGenie.SecuritySensor") 
      &amp;&amp; Program.Parameter("HomeGenie.SecurityTriggered").Value != "1"
      &amp;&amp; (   parameter.Name == "Status.Level"
          || parameter.Name == "Status.DoorLock"
          || parameter.Name == "Sensor.Generic"
          || parameter.Name == "Sensor.Alarm" 
          || parameter.Name == "Sensor.Tamper" 
          || parameter.Name == "Sensor.MotionDetect" 
          || parameter.Name == "Sensor.DoorWindow"
          || parameter.Name == "Sensor.Flood" 
          || parameter.Name == "Sensor.Smoke" 
          || parameter.Name == "Sensor.Heat" 
          || parameter.Name == "Sensor.CarbonMonoxide" 
          || parameter.Name == "Sensor.CarbonDioxide" )) 
  {
    AddHistoryEvent(module.Instance, parameter);
    if (parameter.DecimalValue &gt; 0 &amp;&amp; Program.Parameter("HomeGenie.SecurityArmed").Value != STATUS_DISARMED) 
    {
      if (Program.Parameter("HomeGenie.SecurityArmed").Value == STATUS_ARMED_AWAY ||
          (Program.Parameter("HomeGenie.SecurityArmed").Value == STATUS_ARMED_HOME &amp;&amp; module.HasFeature("HomeGenie.SecurityTriggerHome")))
        moduleAlarmed = true;      
    }
  }

  if (moduleAlarmed)
  {
    Program.RaiseEvent("HomeGenie.SecurityTriggered", "1", "Security System");
    Program.Parameter("HomeGenie.SecurityTriggerSource").Value = 
      module.Instance.Name + " " + parameter.Name + " (" +
      module.Instance.Domain + "." +
      module.Instance.Address + ")";

    var triggeredProgram = Program.Option("Trigger.TriggeredProgram").Value;
    if (triggeredProgram != "")
    {
      Program.Run(triggeredProgram);
    }

    return false;
  }
  return true;
});

// web service calls handling
When.WebServiceCallReceived(Program.Module.Domain + "/" + Program.Module.Address, (args) =&gt; {
  string[] reqs = ((string)args).Split('/');
  var res = "";

  try
  {
    string command = reqs[2];
    string pid = reqs[1];
    if (pid == Program.Module.Address)
    {

      switch(command)
      {
        case "Control.On":
        case "Control.ArmAway":
        	Program.RaiseEvent("Status.Level", "1", "Security System");
        	_armdisarm(false);
        	res = "{ 'ResponseValue' : 'ARMING AWAY' }";
        	break;
        case "Control.ArmHome":
        	Program.RaiseEvent("Status.Level", "1", "Security System");
        	_armdisarm(true);
        	res = "{ 'ResponseValue' : 'ARMING HOME' }";
        	break;
        case "Control.Off":
        case "Control.Disarm":
        	Program.RaiseEvent("Status.Level", "0", "Security System");
        	_armdisarm(false);
        	res = "{ 'ResponseValue' : 'DISARMED' }";
        	break;
        case "Events.List":
        	res = JsonConvert.SerializeObject(history);
        	break;
      }

    }
  } 
  catch (Exception ex) 
  { 
    res = "{ 'ResponseValue' : 'ERROR: " + ex.Message + " " + ex.StackTrace + "' }";
  }
  // unable to process request
  return res;

});

// main program loop
var sirenModules = Modules.WithFeature("HomeGenie.SecurityAlarm").OfDeviceType("Siren");
var alarmModules = Modules.WithFeature("HomeGenie.SecurityAlarm").OfDeviceType("Dimmer,Switch,Light");
while (Program.IsEnabled)
{
  if (Program.Parameter("HomeGenie.SecurityTriggered").Value == "1")
  {
    var watchTimer = new System.Diagnostics.Stopwatch();
    watchTimer.Start();

    // send email
    var subject = "HomeGenie Security System Alarmed";
    var messagetext = "Security System Alarm triggered by " + Program.Parameter("HomeGenie.SecurityTriggerSource").Value;
    var recipients = Program.Option("Email.Recipients").Value;
    if (recipients != "")
    {
      Program.RunAsyncTask(()=&gt;{
        Net.SendMessage(recipients, subject, messagetext);
      });
    }

    // Flashing lights thread starts asynchronously
    Program.RunAsyncTask(()=&gt;{
      while (Program.IsEnabled &amp;&amp; Program.Parameter("HomeGenie.SecurityTriggered").Value == "1")
      {
        // flashing SecurityAlarm lights 
        alarmModules.Toggle();
        Pause(1);
        alarmModules.Toggle();
        Pause(1);
      }
      alarmModules.Off();
    });
    
    // Sirens loop
    int sirenStatus = 0;
    while (Program.IsEnabled &amp;&amp; Program.Parameter("HomeGenie.SecurityTriggered").Value == "1")
    {
      if (sirenStatus == 0 &amp;&amp; watchTimer.Elapsed.TotalSeconds &gt;= Program.Option("System.SirenStartTime").DecimalValue)
      {
        watchTimer.Stop();
        sirenModules.On();
        watchTimer = new System.Diagnostics.Stopwatch();
        watchTimer.Start();
        sirenStatus = 1;
      }
      else if (sirenStatus == 1 &amp;&amp; Program.Option("System.SirenMaxTime").DecimalValue &gt; 0 &amp;&amp; watchTimer.Elapsed.TotalSeconds &gt;= Program.Option("System.SirenMaxTime").DecimalValue)
      {
        // turn off sirens if max time was set and elapsed
        sirenModules.Off();
        sirenStatus = 2;
      }            
    }
    sirenModules.Off();
    watchTimer.Stop();    
    
  }
  Pause(1);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>90</Address>
    <Name>Security Alarm System</Name>
    <Description>Basic Security Alarm System</Description>
    <Group>Security</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Sensor,DoorWindow,DoorLock</ForTypes>
        <Property>HomeGenie.SecuritySensor</Property>
        <Description>Use as Security Sensor</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Sensor,DoorWindow,DoorLock</ForTypes>
        <Property>HomeGenie.SecurityTriggerHome</Property>
        <Description>Also trigger when armed Home</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Siren,Light,Dimmer,Switch</ForTypes>
        <Property>HomeGenie.SecurityAlarm</Property>
        <Description>Use as Security Alarm</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2016-01-22T17:32:08.400181Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("HomeAutomation.ZWave", "DoorWindow,DoorLock,Thermostat,Sensor", "HomeGenie.ZWaveWakeUpAlwaysAwake", "Set node as always awake", "checkbox");
Program.AddFeature("HomeAutomation.ZWave", "DoorWindow,DoorLock,Thermostat,Sensor", "HomeGenie.ZWaveWakeUpSleep", "Send to sleep after given delay (seconds, 0=disabled)", "slider:0:60:1");
Program.Run();
</ScriptCondition>
    <ScriptSource>When.ModuleParameterChanged((module, parameter) =&gt; {

  if (parameter.Name == "ZWaveNode.WakeUpNotify")
  {     
    var nodeinfo = module.Parameter("ZWaveNode.NodeInfo");
    if (nodeinfo != null)
    {
      // nif contains all command classes supported by this module
      string nif = " " + nodeinfo.Value + " ";
      if (nif.Contains(" 84 ") || nif.Contains(" 25 ") || nif.Contains(" 26 ") || nif.Contains(" 43 "))
      {
        if (nif.Contains(" 60 ")) // MultiInstance
        {
          Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " MultiInstance Get");
          // query first 4 instances
          for (int instance = 1; instance &lt; 4; instance ++)
          {
            if (nif.Contains(" 30 ")) // Sensor Binary
            {
              module.Command("MultiInstance.Get").Execute("Sensor.Binary/" + instance);
              Pause(.2);
            }
            else if (nif.Contains(" 31 ")) // Sensor MultiLevel
            {
              module.Command("MultiInstance.Get").Execute("Sensor.MultiLevel/" + instance);
              Pause(.2);
            }
            else if (nif.Contains(" 25 ")) // Switch Binary
            {
              module.Command("MultiInstance.Get").Execute("Switch.Binary/" + instance);
              Pause(.2);
            }
            else if (nif.Contains(" 26 ")) // Switch MultiLevel
            {
              module.Command("MultiInstance.Get").Execute("Switch.MultiLevel/" + instance);
              Pause(.2);
            }
          }
        }
        else if (nif.Contains(" 27 ")) // Any switch
        {
          if (nif.Contains(" 26 "))
            Pause(3); // Pause 3 second to ensure dimmers get to final value
          Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " Basic Get");
          module.Command("Basic.Get").Execute();
          Pause(.2);
        }
        //
        // query Thermostat set point
        if (nif.Contains(" 43 ")) // Thermostat
        {
          Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " Thermostat SetPoint Get Heating");
          module.Command("Thermostat.SetPointGet").Execute("Heating");
          Pause(.2);
        }
        //
        // query Battery level
        if (nif.Contains(" 80 ")) // Battery
        {
          Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " Battery Get");
          module.Command("Battery.Get").Execute();
          Pause(.2);
        }
        //
        // query Basic value
        if (nif.Contains(" 20 ")) // Basic
        {
          Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " Basic Get");
          module.Command("Basic.Get").Execute();
          Pause(.2);
        }
        if (module.HasFeature("HomeGenie.ZWaveWakeUpAlwaysAwake"))
        {
          module.Command("WakeUp.SetAlwaysAwake").Set("1");
        }
        else
        {
          module.Command("WakeUp.SetAlwaysAwake").Set("0");
	      // no more info, send the node to sleep
          var sendToSleepDelay = module.Parameter("HomeGenie.ZWaveWakeUpSleep").DecimalValue;
          if (sendToSleepDelay &gt; 0)
          {
            Pause(sendToSleepDelay);
            Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " Send to Sleep");
            module.Command("WakeUp.SendToSleep").Execute();
          }
        }
      }
    }
  }

  return true; // continue processing event
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>91</Address>
    <Name>Query on Wake Up</Name>
    <Description>Query sensors' data and battery level when a node wakes up.</Description>
    <Group>Z-Wave</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>HomeAutomation.ZWave</ForDomains>
        <ForTypes>DoorWindow,DoorLock,Thermostat,Sensor</ForTypes>
        <Property>HomeGenie.ZWaveWakeUpAlwaysAwake</Property>
        <Description>Set node as always awake</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:0:60:1</FieldType>
        <ForDomains>HomeAutomation.ZWave</ForDomains>
        <ForTypes>DoorWindow,DoorLock,Thermostat,Sensor</ForTypes>
        <Property>HomeGenie.ZWaveWakeUpSleep</Property>
        <Description>Send to sleep after given delay (seconds, 0=disabled)</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2016-01-22T17:32:08.234414Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("", "Switch,Light,Dimmer", "HomeGenie.TurnOffDelay", "Automatic turn off delay (seconds)", "slider:0:3600:1");
Program.Run();
</ScriptCondition>
    <ScriptSource>When.ModuleParameterIsChanging((module, parameter) =&gt; {
  // check if the module raising the event has the Turn Off Delay set
  if (module.HasFeature("HomeGenie.TurnOffDelay") &amp;&amp; module.Parameter("HomeGenie.TurnOffDelay").DecimalValue &gt; 0)
  {
    // Check if the module has just been turned on
    if (parameter.Is("Status.Level") &amp;&amp; parameter.Statistics.Last.Value == 0 &amp;&amp; parameter.DecimalValue &gt; 0)
    {
      // Run a background timer that will turn off the light
      var pausedelay = module.Parameter("HomeGenie.TurnOffDelay").DecimalValue;
      Program.RunAsyncTask(()=&gt;{
        Pause(pausedelay);
        // Check if the light is still on, also module.IsOn could be used
        if (parameter.DecimalValue &gt; 0)
        {
          module.Off();
          Program.Notify(
            "Turn Off Delay",
            module.Instance.Name + "&lt;br&gt;" + 
            module.Instance.Address + 
            " switched off.");
        }
      });
    }
  }
  return true;
});
// the program will be running in the background waiting for events
Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>112</Address>
    <Name>Turn Off Delay</Name>
    <Description>When device is turned on, automatically turn it off after a given delay.</Description>
    <Group>Energy Management</Group>
    <Features>
      <ProgramFeature>
        <FieldType>slider:0:3600:1</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.TurnOffDelay</Property>
        <Description>Automatic turn off delay (seconds)</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("Email.Sender", "", "1. E-Mail address", "text");
Program.AddOption("Email.SmtpServer", "", "2. SMTP Mail Server address", "text");
Program.AddOption("Email.SmtpUserName", "", "3. SMTP username (optional)", "text");
Program.AddOption("Email.SmtpPassword", "", "4. SMTP password (optional)", "text");
Program.AddOption("Email.SmtpPort", "25", "5. SMTP Mail Server port", "text");
Program.AddOption("Email.SmtpUseSsl", "FALSE", "6. SMTP Mail Server use SSL (TRUE or FALSE)", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>while (Program.IsEnabled)
{

  if (Program.Option("Email.Sender").Value != Settings.Parameter("Messaging.Email.Sender").Value)
    Settings.Parameter("Messaging.Email.Sender").Value = Program.Option("Email.Sender").Value;
  if (Program.Option("Email.SmtpServer").Value != Settings.Parameter("Messaging.Email.SmtpServer").Value)
    Settings.Parameter("Messaging.Email.SmtpServer").Value = Program.Option("Email.SmtpServer").Value;
  if (Program.Option("Email.SmtpPort").Value != Settings.Parameter("Messaging.Email.SmtpPort").Value)
    Settings.Parameter("Messaging.Email.SmtpPort").Value = Program.Option("Email.SmtpPort").Value;
  if (Program.Option("Email.SmtpUseSsl").Value != Settings.Parameter("Messaging.Email.SmtpUseSsl").Value)
    Settings.Parameter("Messaging.Email.SmtpUseSsl").Value = Program.Option("Email.SmtpUseSsl").Value;
  if (Program.Option("Email.SmtpUserName").Value != Settings.Parameter("Messaging.Email.SmtpUserName").Value)
    Settings.Parameter("Messaging.Email.SmtpUserName").Value = Program.Option("Email.SmtpUserName").Value;
  if (Program.Option("Email.SmtpPassword").Value != Settings.Parameter("Messaging.Email.SmtpPassword").Value)
    Settings.Parameter("Messaging.Email.SmtpPassword").Value = Program.Option("Email.SmtpPassword").Value;

  Pause(10);

}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>142</Address>
    <Name>E-Mail Account</Name>
    <Description>Store e-mail account information for sending/receiving emails.</Description>
    <Group>Messaging and Social</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2016-01-22T17:32:08.136817Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{
  Program.AddVirtualModules("Favourites.Link", "Generic", "homegenie/generic/link", 1, 5);
  Program.AddFeature("Favourites.Link", "Generic", "FavouritesLink.Url", "Favourites link", "text");
});</ScriptCondition>
    <ScriptSource />
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>180</Address>
    <Name>Favourites Links</Name>
    <Description>Add 5 virtual modules with customizable url link.
These can be added to  groups and are then
shown as hyperlink buttons in the control page.</Description>
    <Group>Devices and Things</Group>
    <Features>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains>Favourites.Link</ForDomains>
        <ForTypes>Generic</ForTypes>
        <Property>FavouritesLink.Url</Property>
        <Description>Favourites link</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("",
                   "Switch,Dimmer,Light,Siren,Sensor,Program,DoorWindow", 
                   "MobileNotification.SendChanges", 
                   "Push notifications to Windows Phone client",
                   "checkbox");
Program.Run();
</ScriptCondition>
    <ScriptSource>string notificationurl = "";
var monitor = Program.WithName("Energy Monitor");

Func&lt;bool&gt; updateTileData = ()=&gt; {

  var devs = monitor.Parameter("EnergyMonitor.OperatingDevices").DecimalValue;
  // Create the Tile message.
  string tileMessage = "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;" +
    "&lt;wp:Notification xmlns:wp=\"WPNotification\"&gt;" +
    "&lt;wp:Tile&gt;" +
    "&lt;wp:Count&gt;0&lt;/wp:Count&gt;" +
    //          "&lt;wp:BackgroundImage&gt;&lt;/wp:BackgroundImage&gt;" +
    //          "&lt;wp:Count&gt;" + (notificationcount++).ToString() + "&lt;/wp:Count&gt;" +
    //          "&lt;wp:Title&gt;HomeGenie Beta&lt;/wp:Title&gt;" +
    "&lt;wp:BackBackgroundImage&gt;&lt;/wp:BackBackgroundImage&gt;" +
    "&lt;wp:BackTitle&gt;Counter " + monitor.Parameter("EnergyMonitor.KwCounter").Value + " Kw&lt;/wp:BackTitle&gt;";
  if (devs &gt; 0)
  {
    tileMessage += "&lt;wp:BackContent&gt;" + devs + " device" + (devs &gt; 1 ? "s" : "") +
      "\nLoad\n" + monitor.Parameter("EnergyMonitor.KwLoad").Value + " Kw&lt;/wp:BackContent&gt;";
  }
  else
  {
    tileMessage += "&lt;wp:BackContent&gt;&lt;/wp:BackContent&gt;";
  }
  tileMessage += "&lt;/wp:Tile&gt; " + "&lt;/wp:Notification&gt;";

  //var response = 
  Net.WebService(notificationurl)
    .AddHeader("Content-type", "text/xml")
    .AddHeader("X-WindowsPhone-Target", "token")
    .AddHeader("X-NotificationClass", "1")
    .Post(tileMessage)
    .Call();

  return true;

};

When.WebServiceCallReceived("HomeAutomaion.HomeGenie/Messaging", ( args ) =&gt; {
  var notificationdata = ((string)args).Substring(("HomeAutomaion.HomeGenie/Messaging/WindowsPhone.RegisterNotificationUrl/").Length);
  //var deviceid = notificationdata.Substring(0, notificationdata.IndexOf('/'));
  notificationurl = notificationdata.Substring(notificationdata.IndexOf('/') + 1);
  //
  if (notificationurl != "") updateTileData();
  //
  return "{ 'ResponseValue' : 'OK' }";
});

When.ModuleParameterChanged( (module, property) =&gt; {

  if (notificationurl != "" &amp;&amp; module.HasFeature("MobileNotification.SendChanges") &amp;&amp; (property.Name.StartsWith("Sensor.") || property.Name.StartsWith("Status.")))
  {
    if (property.DecimalValue != property.Statistics.Last.Value) // TODO: check time from lastvalue as well to prevent flooding
    {
      var pname = property.Name;
      if (pname.IndexOf('.') &gt; 0)
      {
        pname = pname.Substring(pname.IndexOf('.') + 1);
      }
      // Create the Tile message.
      string toastMessage = "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;" +
        "&lt;wp:Notification xmlns:wp=\"WPNotification\"&gt;" +
        "&lt;wp:Toast&gt;" +
        "&lt;wp:Text1&gt;" + module.Instance.Name + "&lt;/wp:Text1&gt;" +
        "&lt;wp:Text2&gt;" + pname + " = " + property.Value + "&lt;/wp:Text2&gt;" +
        "&lt;wp:Param&gt;/GroupsPage.xaml?NavigatedFrom=Toast Notification&lt;/wp:Param&gt;" +
        "&lt;/wp:Toast&gt; " +
        "&lt;/wp:Notification&gt;";

      //var response = 
      Net.WebService(notificationurl)
        .AddHeader("Content-type", "text/xml")
        .AddHeader("X-WindowsPhone-Target", "toast")
        .AddHeader("X-NotificationClass", "2")
        .Post(toastMessage)
        .Call();
    }

  }

  // returning true, will route event to other listeners
  return true; 

});

while(Program.IsEnabled)
{
  if (notificationurl != "")
  {
    updateTileData();
    Pause(300);
  }
  Pause(5);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>200</Address>
    <Name>Windows Phone Push Notification Service</Name>
    <Description>Windows Phone push notification service. 
It sends toast and tile updates to Windows Phone client.
Currently limited to one client channel.</Description>
    <Group>Messaging and Social</Group>
    <Features>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Switch,Dimmer,Light,Siren,Sensor,Program,DoorWindow</ForTypes>
        <Property>MobileNotification.SendChanges</Property>
        <Description>Push notifications to Windows Phone client</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddVirtualModule("HomeAutomation.EnergyMonitor", "1", "Sensor", "homegenie/generic/energymonitor");
Program.Run();
</ScriptCondition>
    <ScriptSource>var energyMonitor = Modules.InDomain("HomeAutomation.EnergyMonitor").WithAddress("1").Get();
var kwCounter = energyMonitor.Parameter("EnergyMonitor.KwCounter");
var kwLoad = energyMonitor.Parameter("EnergyMonitor.KwLoad");
var wattCounter = energyMonitor.Parameter("EnergyMonitor.WattCounter");
var wattLoad = energyMonitor.Parameter("EnergyMonitor.WattLoad");
var operatingDevices = energyMonitor.Parameter("EnergyMonitor.OperatingDevices");
var operatingLights = energyMonitor.Parameter("EnergyMonitor.OperatingLights");
var operatingSwitches = energyMonitor.Parameter("EnergyMonitor.OperatingSwitches");

// initialize
energyMonitor.Instance.Name = "Energy Monitor";
kwCounter.Value = "0";
kwLoad.Value = "0";
wattCounter.Value = "0";
wattLoad.Value = "0";
operatingDevices.Value = "0";
operatingLights.Value = "0";
operatingSwitches.Value = "0";

// select all modules supporting metering
var meterModules = Modules.WithParameter("Meter.Watts");
var notifyTicks = 5; // minutes

var UpdateEnergyLoad = new Func&lt;bool&gt;(()=&gt;{
  var totalLoad = 0d;
  int devcount = 0, lightcount = 0, switchcount = 0;
  meterModules.Each((mod)=&gt;{
    if (mod.Parameter("Meter.Watts").DecimalValue &gt; 0)
    {
      totalLoad += mod.Parameter("Meter.Watts").DecimalValue;
      if (mod.IsOfDeviceType("Light") || mod.IsOfDeviceType("Dimmer"))
      {
        lightcount++;
      }
      else
      {
        switchcount++;  
      }
      devcount++;
    }
    return false;
  });
  Program.RaiseEvent(energyMonitor, kwLoad.Name, (totalLoad / 1000D).ToString("0.000", CultureInfo.InvariantCulture), "Energy Monitor");
  Program.RaiseEvent(energyMonitor, wattLoad.Name, totalLoad.ToString("0.000", CultureInfo.InvariantCulture), "Energy Monitor");
  Program.RaiseEvent(energyMonitor, operatingDevices.Name, devcount.ToString("0"), "Energy Monitor");
  Program.RaiseEvent(energyMonitor, operatingLights.Name, lightcount.ToString("0"), "Energy Monitor");
  Program.RaiseEvent(energyMonitor, operatingSwitches.Name, switchcount.ToString("0"), "Energy Monitor");
  return true;
});

When.WebServiceCallReceived("HomeAutomation.EnergyMonitor", (args)=&gt;{
  dynamic response = new System.Dynamic.ExpandoObject();
  response.KiloWattLoad = kwLoad.Value;
  response.KiloWattCouter = kwCounter.Value;
  response.WattCounter = wattCounter.Value;
  response.WattLoad = wattLoad.Value;
  response.OperatingDevices = operatingDevices.Value;
  response.OperatingLights = operatingLights.Value;
  response.OperatingSwitches = operatingSwitches.Value;
  return "[" + Newtonsoft.Json.JsonConvert.SerializeObject(response) + "]";
});

while (Program.IsEnabled)
{
  notifyTicks++;
  UpdateEnergyLoad();
  // update global statistics and notify every 5 minutes
  if (wattLoad.DecimalValue &gt; 0 &amp;&amp; notifyTicks &gt;= 5)
  {
    notifyTicks = 0;
    // update energy use parameters
    var energyUse = Program.EnergyUseCounter;
    Program.RaiseEvent(energyMonitor, kwCounter.Name, (energyUse / 1000D).ToString("0.000", CultureInfo.InvariantCulture), "Energy Monitor");
    Program.RaiseEvent(energyMonitor, wattCounter.Name, energyUse.ToString("0.000", CultureInfo.InvariantCulture), "Energy Monitor");
  }
  Pause(60);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>81</Address>
    <Name>Energy Monitor</Name>
    <Description>Collects and stores real-time information about
energy consumption.</Description>
    <Group>Energy Management</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2016-01-22T17:32:08.162466Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Run();
</ScriptCondition>
    <ScriptSource>var checkVirtualModules = new Func&lt;ModuleHelper, bool&gt;((module)=&gt;{
  var defaultType = "Switch";
  var parameter = module.Parameter("ZWaveNode.MultiInstance.SwitchBinary.Count");
  if (parameter.DecimalValue == 0)
  {
    // if not SwitchBinary, try SwitchMultilevel
    defaultType = "Dimmer";
    parameter = module.Parameter("ZWaveNode.MultiInstance.SwitchMultiLevel.Count");
  }
  // ADD A VIRTUAL MODULE FOR EACH INSTANCE
  for (int m = 1; m &lt;= parameter.DecimalValue; m++)
  {
    string address = module.Instance.Address + "." + m.ToString();
    var virtualModule = Modules.InDomain("HomeAutomation.ZWave").WithAddress(address).Get();
    if (!virtualModule.WasFound)
    {
      Program.AddVirtualModule("HomeAutomation.ZWave", address, defaultType, "");
      Program.Notify("MultiChannel Z-Wave", "Adding virtual module " + address);
    }
  }
  return true;
});

When.ModuleParameterChanged((module, parameter) =&gt; {
  lock(this)
    if (!parameter.Name.EndsWith(".Count") &amp;&amp; (parameter.Name.StartsWith("ZWaveNode.MultiInstance.SwitchMultiLevel.") || parameter.Name.StartsWith("ZWaveNode.MultiInstance.SwitchBinary.")))
  {
    var path = parameter.Name.Split('.');
    //var eventType = path[2]; 	// "SwitchMultiLevel" or "SwitchBinary"
    var instance = path[3];		// the instance number

    var id = 0;
    if (int.TryParse(instance, out id))
    {
      var virtualmodule = Modules.InDomain("HomeAutomation.ZWave").WithAddress(module.Instance.Address + "." + instance).Get();
      Program.RaiseEvent(virtualmodule, "Status.Level", parameter.Value, "ZWaveNode");
    }

  }
  else if (parameter.Name == "ZWaveNode.NodeInfo")
  {
    var nif = (" " + parameter.Value + " "); // node information frame
    if (nif.Contains(" 60 ")) // MultiInstance/Channel
    {
      // ReQUEST instances count
      if (nif.Contains(" 25 ")) // 0x25 Switch Binary
      {
        module.Command("MultiInstance.GetCount").Execute("Switch.Binary");
      }
      if (nif.Contains(" 26 ")) // 0x26 Switch MultiLevel
      {
        module.Command("MultiInstance.GetCount").Execute("Switch.MultiLevel");
      }
      checkVirtualModules(module);
    }
  }

  return true; // continue processing event
});

When.WebServiceCallReceived("HomeAutomation.ZWave", (args) =&gt; {

  string[] reqs = ((string)args).Split('/');
  //string domain = reqs[0];
  try
  {
    string nodeid = reqs[1];
    string instance = "";
    string command = reqs[2];
    string parameter = ""; if (reqs.Length &gt; 3) parameter = reqs[3];
    //
    // Check if it's a node supporting MultiInstance/Channel
    // if the node address is in the form &lt;mainnode_id&gt;.&lt;instance&gt;
    // then this is a command for a multiinstance virtual module
    if (nodeid.IndexOf('.') &gt; 0)
    {
      instance = nodeid.Substring(nodeid.IndexOf('.') + 1);
      nodeid = nodeid.Substring(0, nodeid.IndexOf('.'));
    }
    if (instance != "")
    {
      var virtualmodule = Modules.InDomain("HomeAutomation.ZWave").WithAddress(nodeid + "." + instance).Get();
      var parentmodule = Modules.InDomain("HomeAutomation.ZWave").WithAddress(nodeid).Get();
      //
      switch(command)
      {
        case "Control.On":
          parentmodule.Command("MultiInstance.Set").Execute("Switch.Binary/" + instance + "/255");
          Program.RaiseEvent(virtualmodule, "Status.Level", "1", "ZWaveNode");
          break;
        case "Control.Off":
          parentmodule.Command("MultiInstance.Set").Set("Switch.Binary/" + instance + "/0");
          Program.RaiseEvent(virtualmodule, "Status.Level", "0", "ZWaveNode");
          break;
        case "Control.Toggle":
          if (virtualmodule.Parameter("Status.Level").DecimalValue == 0)
          {
            parentmodule.Command("MultiInstance.Set").Set("Switch.Binary/" + instance + "/255");
            Program.RaiseEvent(virtualmodule, "Status.Level", "1", "ZWaveNode");
          }
          else
          {
            parentmodule.Command("MultiInstance.Set").Set("Switch.Binary/" + instance + "/0");
            Program.RaiseEvent(virtualmodule, "Status.Level", "0", "ZWaveNode");
          }
          break;
        case "Control.Level":
          parentmodule.Command("MultiInstance.Set").Set("Switch.MultiLevel/" + instance + "/" + parameter);
          Program.RaiseEvent(virtualmodule, "Status.Level", (double.Parse(parameter) / 100D).ToString(), "ZWaveNode");
          break;
      }
      //
      return "{ 'ResponseValue' : 'OK' }";    
    }
  } catch (Exception e) { 

    Program.Notify("ZWave MultiInstance module ERROR!", e.Message);

  }  	

  return "";
});

// setup multi channel virtual modules at startup
Modules.InDomain("HomeAutomation.ZWave").Each((module)=&gt;{
  checkVirtualModules(module);
  return false;
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>93</Address>
    <Name>Multi Instance/Channel  Virtual Modules</Name>
    <Description>Adds a virtual module for each instance of a multi instance node.
It requires that a manufacturer specific get has been issued on the node.</Description>
    <Group>Z-Wave</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2016-01-22T17:32:08.332019Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("CellAddress", "192.168.0.?", "1. Remote HG server address", "text");
Program.AddOption("CellUsername", "", "2. Username", "text");
Program.AddOption("CellPassword", "", "3. Password", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  var celladdress  = Program.Option("CellAddress").Value;
  var cellusername = Program.Option("CellUsername").Value;
  var cellpassword = Program.Option("CellPassword").Value;
  // ROUTE METERING EVENT TO REMOTE HG CELL
  if (!celladdress.Contains("?") &amp;&amp; property.Name.StartsWith("Sensor."))
  {
    Net
      .WithCredentials(cellusername, cellpassword)
      .SignalModuleEvent(celladdress, module, property);
  }
  // returning true, will route event to other listeners
  return true;
});
Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>76</Address>
    <Name>Sensor.* events forwarding</Name>
    <Description>Forwards devices' Sensor.* values changes to another HomeGenie box.</Description>
    <Group>Interconnections</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("HomeAutomation.X10.RF", "Sensor", "X10RFString.LevelOn", "Raw RF string for ON event", "capture:Receiver.RawData");
Program.AddFeature("HomeAutomation.X10.RF", "Sensor", "X10RFString.LevelOff", "Raw RF string for OFF event", "capture:Receiver.RawData");
Program.AddVirtualModules("HomeAutomation.X10.RF", "Sensor", "homegenie/generic/sensor", 1, 16);
Program.Run();
</ScriptCondition>
    <ScriptSource>var x10rfModules = Modules.InDomain("HomeAutomation.X10.RF");
// We want to do further processing whenever a module prop changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  if (property.Name == "Receiver.RawData" &amp;&amp; module.Instance.Domain == "HomeAutomation.X10")
  {
    x10rfModules.Each((m)=&gt;{
      var rfon = m.Parameter("X10RFString.LevelOn").Value;
      var rfoff = m.Parameter("X10RFString.LevelOff").Value;
      if (rfon != "" &amp;&amp; rfon == property.Value)
      {
        Program.RaiseEvent(m, "Status.Level", "1", "X10 Virtual RF Module");
        return true;
      }
      else if (rfoff != "" &amp;&amp; rfoff == property.Value)
      {
        Program.RaiseEvent(m, "Status.Level", "0", "X10 Virtual RF Module");
        return true;
      }
      return false;
    });
  }
  return true;
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>121</Address>
    <Name>X10 RF Virtual Modules Mapper</Name>
    <Description>Generate ON/OFF event when specific X10 RF raw strings are received.</Description>
    <Group>X10</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("", "Switch,Light,Dimmer", "HomeGenie.SmartLights.Enable", "Enable Smart Light Control", "checkbox");
Program.AddFeature("", "Switch,Light,Dimmer", "TimeTable.ExternalControl", "Synchronize with Timetable schedule if set", "checkbox");
Program.AddFeature("", "Switch,Light,Dimmer", "HomeGenie.SmartLights.OnMotionDetect", "Controlled by motion sensor (optional)", "module.text:any:sensor:status.level,sensor.motiondetect");
Program.AddFeature("", "Switch,Light,Dimmer", "HomeGenie.SmartLights.CheckLuminosity", "Controlled by luminance sensor (optional)", "module.text:any:any:sensor.luminance");
Program.AddFeature("", "Switch,Light,Dimmer", "HomeGenie.SmartLights.MinLuminance", "Trigger if luminance is below", "slider:0:1000:1");
Program.AddFeature("", "Switch,Light,Dimmer", "HomeGenie.SmartLights.SwitchOffTimeout", "Turn off after inactivity timeout (seconds)", "slider:30:3600:30");
Program.Run();
</ScriptCondition>
    <ScriptSource>var SMART_LIGHT_ENABLE = "HomeGenie.SmartLights.Enable";
var MOT_SENSOR_NAME = "HomeGenie.SmartLights.OnMotionDetect";
var LUM_SENSOR_NAME = "HomeGenie.SmartLights.CheckLuminosity";
var TURNOFF_TIMEOUT = "HomeGenie.SmartLights.SwitchOffTimeout";
var MIN_LUMINANCE = "HomeGenie.SmartLights.MinLuminance";
var LAST_EVENT = "HomeGenie.SmartLights.LastEvent";

var smart_devices = Modules.WithFeature(SMART_LIGHT_ENABLE);

var GetDomainAddress = new Func&lt;string, dynamic&gt;((domainAddress)=&gt;{
  dynamic v = new ExpandoObject();
  v.Domain = "0";
  v.Address = "0";
  if (domainAddress.IndexOf(":") &gt; 0)
  {
    v.Domain = domainAddress.Substring(0, domainAddress.LastIndexOf(':'));
    v.Address = domainAddress.Substring(domainAddress.LastIndexOf(':') + 1);
  }
  return v;
});

When.ModuleParameterIsChanging((module, parameter) =&gt; {

  if (module.IsOfDeviceType("Sensor"))
  {
    if (parameter.Name == "Sensor.MotionDetect" || parameter.Name == "Status.Level")
    {
      var motionlevel = parameter.DecimalValue;
      if (motionlevel &gt; 0)
      {
        smart_devices.Each((mod)=&gt; {

          // Timetable sync
          bool synchTimetable = mod.HasFeature("TimeTable.ExternalControl") &amp;&amp; mod.HasFeature("TimeTable.Enable");
          if (synchTimetable &amp;&amp; mod.Parameter("TimeTable.Status").Value == "OFF")
            return false;

          var da = GetDomainAddress(mod.Parameter(MOT_SENSOR_NAME).Value);
          if (da.Domain == module.Instance.Domain &amp;&amp; da.Address == module.Instance.Address)
          {
            mod.Parameter(LAST_EVENT).Value = DateTime.UtcNow.Ticks.ToString();
            //if (mod.IsOff)
            {
              da = GetDomainAddress(mod.Parameter(LUM_SENSOR_NAME).Value);
              var lumsensor = Modules.InDomain(da.Domain).WithAddress(da.Address).Get();
              if (lumsensor.Instance != null)
              {
                var luminosity = lumsensor.Parameter("Sensor.Luminance").DecimalValue;
                if (luminosity &lt; mod.Parameter(MIN_LUMINANCE).DecimalValue)
                {
                  Program.Notify("Smart Lights", module.Instance.Name + "&lt;br&gt;switched ON " + mod.Instance.Address + " " + mod.Instance.Name);
                  if (synchTimetable &amp;&amp; mod.Parameter("TimeTable.Status").DecimalValue &gt; 0)
                    mod.Level = mod.Parameter("TimeTable.Status").DecimalValue;
                  else
                    mod.On();
                }
              }
              else	
              {
                Program.Notify("Smart Lights", module.Instance.Name + "&lt;br&gt;switched ON " + mod.Instance.Address + " " + mod.Instance.Name);
                if (synchTimetable &amp;&amp; mod.Parameter("TimeTable.Status").DecimalValue &gt; 0)
                  mod.Level = mod.Parameter("TimeTable.Status").DecimalValue;
                else
                  mod.On();
              }
            }
          }

          return false;
        });
      }
    }
  }
  
  return true;
});

while (Program.IsEnabled)
{
  smart_devices.Each((mod)=&gt; {
    var timeout = mod.Parameter(TURNOFF_TIMEOUT).DecimalValue;
    // default timeout is 30 seconds
    if (timeout == 0) timeout = 30;
    if (mod.IsOn)
    {
      var lastevent = mod.Parameter(LAST_EVENT).UpdateTime;
      var lastupdate = mod.Parameter("Status.Level").UpdateTime;
      var checktime = lastevent.Ticks;
      if (checktime &lt; lastupdate.Ticks) checktime = lastupdate.Ticks;
      var elapsed = new TimeSpan(DateTime.UtcNow.Ticks - checktime);
      if (elapsed.TotalSeconds &gt; timeout) {
        Program.Notify("Smart Lights", mod.Instance.Address + " " + mod.Instance.Name + "&lt;br&gt;switched OFF.");
        mod.Off();
      }
    }
    return false;
  });
  Pause(5);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>145</Address>
    <Name>Smart Lights</Name>
    <Description>Control device by motion detection and enviroment light. </Description>
    <Group>Lights</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.SmartLights.Enable</Property>
        <Description>Enable Smart Light Control</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>TimeTable.ExternalControl</Property>
        <Description>Synchronize with Timetable schedule if set</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>module.text:any:sensor:status.level,sensor.motiondetect</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.SmartLights.OnMotionDetect</Property>
        <Description>Controlled by motion sensor (optional)</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>module.text:any:any:sensor.luminance</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.SmartLights.CheckLuminosity</Property>
        <Description>Controlled by luminance sensor (optional)</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:0:1000:1</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.SmartLights.MinLuminance</Property>
        <Description>Trigger if luminance is below</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:30:3600:30</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.SmartLights.SwitchOffTimeout</Property>
        <Description>Turn off after inactivity timeout (seconds)</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2016-01-22T17:32:08.155183Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>hg.Program.UseWidget("jkUtils/SolarAltitude/SolarAltitude");
hg.Program.AddOption("jkUtils.SolarAltitude.Latitude", "", "Location: Latitude", "text");
hg.Program.AddOption("jkUtils.SolarAltitude.Longitude", "", "Location: Longitude", "text");    
hg.Program.AddOption("jkUtils.SolarAltitude.Label", "", "Custom Label", "text");
hg.Program.AddOption("jkUtils.SolarAltitude.Zoom", "100%", "Custom Zoom", "text");
hg.Program.AddOption("jkUtils.SolarAltitude.Color", "46", "Custom Color (HUE Value)", "text");
hg.Program.AddOption("jkUtils.SolarAltitude.Timeformat", "FALSE", "Custom Timeformat (TRUE = use AM/PM Format, FALSE = use 24h Format)", "text");
hg.Program.Run();
</ScriptCondition>
    <ScriptSource>
// jkUtils - Solar Altitude Ver 2.0 2014-05-07
// ------------------------------------
// A HomeGenie script to locally calculate sunrise/sunset with civil, nautical and astronomical timings.
// This script also sets and automatically updates timers for the scheduler service.
// Requires local longitude and latitude values to be set within programm options.
// Localization implemented for: US-en and DE-de. Feel free to add your own localization in /locales dir analogous to HomeGenie .json files.
// All used Icons/Graphics make full use of png-transparency to be able to place them over any colored background.

// Released under BSD-licensed.
// (c) 2014 Jan Koch, Berlin

// Acknowledgements:

// This program makes use of the original SunCalc which is a JavaScript library for calculating sun/mooon position and light phases.
// For more info see https://github.com/mourner/SunCalc (c) 2011-2014, Vladimir Agafonkin. BSD-licensed.

// calculations for illumination parameters of the moon, based on http://idlastro.gsfc.nasa.gov/ftp/pro/astro/mphase.pro formulas and
// Chapter 48 of "Astronomical Algorithms" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.


// shortcuts for easier to read formulas

var PI = Math.PI,
    sin = Math.sin,
    cos = Math.cos,
    tan = Math.tan,
    asin = Math.asin,
    atan = Math.atan2,
    acos = Math.acos,
    rad = PI / 180;

// sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas


// date/time constants and conversions

var dayMs = 1000 * 60 * 60 * 24,
    J1970 = 2440588,
    J2000 = 2451545;

function toJulian(date) {
  return date.valueOf() / dayMs - 0.5 + J1970;
}
function fromJulian(j) {
  return new Date((j + 0.5 - J1970) * dayMs);
}
function toDays(date) {
  return toJulian(date) - J2000;
}


// general calculations for position

var e = rad * 23.4397; // obliquity of the Earth

function getRightAscension(l, b) {
  return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l));
}
function getDeclination(l, b) {
  return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l));
}
function getAzimuth(H, phi, dec) {
  return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi));
}
function getAltitude(H, phi, dec) {
  return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H));
}
function getSiderealTime(d, lw) {
  return rad * (280.16 + 360.9856235 * d) - lw;
}


// general sun calculations

function getSolarMeanAnomaly(d) {
  return rad * (357.5291 + 0.98560028 * d);
}
function getEquationOfCenter(M) {
  return rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M));
}
function getEclipticLongitude(M, C) {
  var P = rad * 102.9372; // perihelion of the Earth
  return M + C + P + PI;
}
function getSunCoords(d) {

  var M = getSolarMeanAnomaly(d),
      C = getEquationOfCenter(M),
      L = getEclipticLongitude(M, C);

  return {
    dec: getDeclination(L, 0),
    ra: getRightAscension(L, 0)
  };
}


var SolarAltitude = {};


// calculates sun position for a given date and latitude/longitude

SolarAltitude.getPosition = function (date, lat, lng) {

  var lw = rad * -lng,
      phi = rad * lat,
      d = toDays(date),

      c = getSunCoords(d),
      H = getSiderealTime(d, lw) - c.ra;

  return {
    azimuth: getAzimuth(H, phi, c.dec),
    altitude: getAltitude(H, phi, c.dec)
  };
};


// sun times configuration (angle, morning name, evening name)

var times = [
  [ -0.83,'sunrise', 'sunset' ],
  [ -0.3, 'sunriseEnd', 'sunsetStart' ],
  [ -6,   'dawn', 'dusk' ],                     //nautical twilight angle
  [ -12,  'nauticalDawn', 'nauticalDusk'],     //astronomical twilight angle
  [ -18,  'nightEnd', 'night' ],               //darkness angle
  [ 6,    'goldenHourEnd', 'goldenHour' ]
];

// adds a custom time to the times config

SolarAltitude.addTime = function (angle, riseName, setName) {
  times.push([angle, riseName, setName]);
};


// calculations for sun times

var J0 = 0.0009;

function getJulianCycle(d, lw) {
  return Math.round(d - J0 - lw / (2 * PI));
}
function getApproxTransit(Ht, lw, n) {
  return J0 + (Ht + lw) / (2 * PI) + n;
}
function getSolarTransitJ(ds, M, L) {
  return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L);
}
function getHourAngle(h, phi, d) {
  var first = sin(h) - sin(phi) * sin(d),
      second = cos(phi) * cos(d),
      third = first / second;
  if ( third &lt; -1 || third &gt; 1 ) {
    third = Math.round(third);
  }  
  return acos(third);
}


// calculates sun times for a given date and latitude/longitude

SolarAltitude.getTimes = function (date, lat, lng) {

  var lw = rad * -lng,
      phi = rad * lat,
      d = toDays(date),

      n = getJulianCycle(d, lw),
      ds = getApproxTransit(0, lw, n),

      M = getSolarMeanAnomaly(ds),
      C = getEquationOfCenter(M),
      L = getEclipticLongitude(M, C),

      dec = getDeclination(L, 0),

      Jnoon = getSolarTransitJ(ds, M, L);


  // returns set time for the given sun altitude
  function getSetJ(h) {
    var w = getHourAngle(h, phi, dec),
        a = getApproxTransit(w, lw, n);

    return getSolarTransitJ(a, M, L);
  }


  var result = {
    solarNoon: fromJulian(Jnoon),
    nadir: fromJulian(Jnoon - 0.5)
  };

  var i, len, time, angle, morningName, eveningName, Jset, Jrise;

  for (i = 0, len = times.length; i &lt; len; i += 1) {
    time = times[i];

    Jset = getSetJ(time[0] * rad);
    Jrise = Jnoon - (Jset - Jnoon);

    result[time[1]] = fromJulian(Jrise);
    result[time[2]] = fromJulian(Jset);
  }

  return result;
};


// moon calculations, based on http://aa.quae.nl/en/reken/hemelpositie.html formulas

function getMoonCoords(d) { // geocentric ecliptic coordinates of the moon

  var L = rad * (218.316 + 13.176396 * d), // ecliptic longitude
      M = rad * (134.963 + 13.064993 * d), // mean anomaly
      F = rad * (93.272 + 13.229350 * d), // mean distance

      l = L + rad * 6.289 * sin(M), // longitude
      b = rad * 5.128 * sin(F), // latitude
      dt = 385001 - 20905 * cos(M); // distance to the moon in km

  return {
    ra: getRightAscension(l, b),
    dec: getDeclination(l, b),
    dist: dt
  };
}

SolarAltitude.getMoonPosition = function (date, lat, lng) {

  var lw = rad * -lng,
      phi = rad * lat,
      d = toDays(date),

      c = getMoonCoords(d),
      H = getSiderealTime(d, lw) - c.ra,
      h = getAltitude(H, phi, c.dec);

  // altitude correction for refraction
  h = h + rad * 0.017 / tan(h + rad * 10.26 / (h + rad * 5.10));

  return {
    azimuth: getAzimuth(H, phi, c.dec),
    altitude: h,
    distance: c.dist
  };
};

SolarAltitude.getMoonIllumination = function (date) {

  var d = toDays(date),
      s = getSunCoords(d),
      m = getMoonCoords(d),

      sdist = 149598000, // distance from Earth to Sun in km

      phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)),
      inc = atan(sdist * sin(phi), m.dist - sdist * cos(phi));

  return {
    fraction: (1 + cos(inc)) / 2,
    angle: atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec)
                - cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra))
  };
};

SolarAltitude.printTime = function (d,m){
  var newd = new Date(d.valueOf() + m * 60000);
  var min = newd.getMinutes();
  var hour = newd.getHours();
  if (min &lt; 10) min = "0" + min;
  if (hour &lt; 10) hour = "0" + hour;
  return hour+":"+min;
};

SolarAltitude.saveTimer = function (timer,d,m){
  var str = 'hg.Program.Parameter("'+ timer + '").Value = SolarAltitude.printTime(d,m);';
  eval(str);
  var str = 'var savedTimer = hg.Program.Parameter("'+ timer + '").Value';
  eval(str);
  var spiltTimer = savedTimer.split(":");
  timer = timer.substring(timer.indexOf(".")+1);
  hg.Scheduler.WithName(timer).SetSchedule(""+ spiltTimer[1] +" "+ spiltTimer[0] +" * * *");
};


SolarAltitude.main = function () {

  // HomeGenie Main Script Logic starts here ------- 

  var currentTime = new Date();
  var latitude = hg.Program.Option("jkUtils.SolarAltitude.Latitude").Value;
  var longitude = hg.Program.Option("jkUtils.SolarAltitude.Longitude").Value;    
  var sun = SolarAltitude.getTimes(currentTime, latitude, longitude);
  var moon = SolarAltitude.getMoonIllumination(currentTime);

  var timeFormat = {hour: "numeric", minute: "numeric"};

  // copy configure inputs to parameters as well
  hg.Program.Parameter("jkUtils.SolarAltitude.Latitude").Value = hg.Program.Option("jkUtils.SolarAltitude.Latitude").Value;
  hg.Program.Parameter("jkUtils.SolarAltitude.Longitude").Value = hg.Program.Option("jkUtils.SolarAltitude.Longitude").Value;
  hg.Program.Parameter("jkUtils.SolarAltitude.Label").Value = hg.Program.Option("jkUtils.SolarAltitude.Label").Value;
  hg.Program.Parameter("jkUtils.SolarAltitude.Timeformat").Value = hg.Program.Option("jkUtils.SolarAltitude.Timeformat").Value;

  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Day.Start",sun.nightEnd,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Day.Noon",sun.solarNoon,0);

  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Night.Start",sun.night,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Night.Nadir",sun.nadir,0);

  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Night.End",sun.nightEnd,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Astronomical.Start",sun.nightEnd,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Astronomical.End",sun.nauticalDawn,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Nautical.Start",sun.nauticalDawn,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Nautical.End",sun.dawn,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Civil.Start",sun.dawn,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Civil.End",sun.sunrise,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Sunrise.Start",sun.sunrise,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Sunrise.End",sun.sunriseEnd,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.GoldenHour.Start",sun.sunriseEnd,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.GoldenHour.End",sun.goldenHourEnd,0);

  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.GoldenHour.Start",sun.goldenHour,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.GoldenHour.End",sun.sunsetStart,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Sunset.Start",sun.sunsetStart,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Sunset.End",sun.sunset,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Civil.Start",sun.sunset,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Civil.End",sun.dusk,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Nautical.Start",sun.dusk,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Nautical.End",sun.nauticalDusk,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Astronomical.Start",sun.nauticalDusk,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Astronomical.End",sun.night,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Night.Start",sun.night,0);

  hg.Program.Parameter("jkUtils.SolarAltitude.Moon.Fraction").Value = moon.fraction;

  moon.fraction = moon.fraction * 100;

  hg.Program.Parameter("jkUtils.SolarAltitude.Moon.Precent").Value = Math.round(moon.fraction) + "%";
  hg.Program.Parameter("jkUtils.SolarAltitude.Moon.Angle").Value = moon.angle;
  hg.Program.Parameter("jkUtils.SolarAltitude.Moon.Waxing").Value = (moon.angle &lt; 0 ? "1" : "0");

  hg.Program.Parameter("jkUtils.SolarAltitude.LastUpdated").Value = SolarAltitude.printTime(currentTime,0);

  hg.Program.Notify("jkUtils - Solar Altitude", "Data has been updated.");

};

//
// Web service calls handling
//
hg.When.WebServiceCallReceived(hg.Program.Module.Domain + "/" + hg.Program.Module.Address, function (args) {
  var reqs = args.split('/');
  var res = "ERROR";
  var command = reqs[2];
  switch(command)
  {
    case "Control.Refresh":
      res = "OK";
      hg.Program.Notify("jkutils: SolarAltitude","Update triggered.");
      SolarAltitude.main();
      break;
  }
  return res;
});

// For your convenience:
//   If you should need a way to parse the saved times within you own scripts, you can use the following function.
//   It is able to parse all kind of notations e.g.: '1:00 pm','1:00 p.m.', ...

//   function parseTime(timestring) {
//     var d = new Date();
//     var time = timestring.match(/(\d+)(?::(\d\d))?\s*(p?)/);
//     d.setHours( parseInt(time[1]) + (time[3] ? 12 : 0) );
//     d.setMinutes( parseInt(time[2]) || 0 );

//    return d;
//   }


while (hg.Program.IsEnabled)
{
  SolarAltitude.main();
  // Update every 12 hours
  hg.Pause(12*60*60);

}

</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>501</Address>
    <Name>jkUtils - Solar Altitude</Name>
    <Description>Calculates schedulers for sunrise/sunset with civil, nautical, astronomical timings. 
  Please set your local longitude/latitude in program options.</Description>
    <Group>Weather and Environment</Group>
    <Features />
    <ActivationTime>2015-01-24T15:29:22.324048Z</ActivationTime>
    <TriggerTime>2015-01-28T15:43:27.645661Z</TriggerTime>
    <Type>Javascript</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>IPHostEntry host;
string localIP = "1";
host = Dns.GetHostEntry(Dns.GetHostName());
foreach (IPAddress ip in host.AddressList)
{
  if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
  {
    localIP = ip.ToString();
    localIP = localIP.Substring(localIP.LastIndexOf(".") + 1);
  }
}
Program.AddOption("ClientId", "hg-" + localIP, "0. Enter unique ID for this client", "text");
Program.AddOption("ServerAddress", "", "1. MQTT server address", "text");
Program.AddOption("ServerPort", "1883", "2. MQTT server port", "text");
Program.AddOption("ServerTopic", "#", "3. Topic", "text");
Program.AddOption("Username", "", "4. Username (optional)", "text");
Program.AddOption("Password", "", "5. Password (optional)", "text");
Program.AddFeature("", "", "MQTT.SensorPublish", "Publish module on MQTT network", "checkbox");
Program.Run();
</ScriptCondition>
    <ScriptSource>string server = Program.Option("ServerAddress").Value.Trim();
int port = 1883; int.TryParse(Program.Option("ServerPort").Value, out port);
string topic = Program.Option("ServerTopic").Value.Trim();
string clientid = Program.Option("ClientId").Value.Trim();
string username = Program.Option("Username").Value.Trim();
string password = Program.Option("Password").Value.Trim();

var MqttIsConnected = false;

if (server == "")
{
  Program.Notify("MQTT", "Please configure server address");
  Pause(5);
  return;
}
else
{
  Program.Notify("MQTT", "Connecting to " + server + "...");
  try
  {
    if (username != "")
    {
      MqttClient.WithCredentials(username, password);
    }
    MqttClient
      .Service(server)
      .Connect(port, clientid);
    Program.Notify("MQTT", "Connected!");
    MqttIsConnected = true;
  }
  catch (Exception e)
  {
    Program.Notify("MQTT", e.Message);
    Pause(5);
    return;
  }
}

MqttClient.Subscribe(topic, (mtopic, mpayload) =&gt; {
  var parts = mtopic.Split('/');
  var cid = parts[0];
  //
  if (parts.Length == 4)
  {
    try
    {
      var domain = parts[1];
      var address = parts[2];
      var type = parts[3];

      var module = Modules.InDomain("MQTT:" + cid + "." + domain).WithAddress(address).Get();

      switch (type)
      {
        case "command":
        if (domain == "MQTT.Listeners" &amp;&amp; address == clientid)
        {
          var cmdobj = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;dynamic&gt;(mpayload);
          var targetmodule = Modules.InDomain(cmdobj.Domain.ToString()).WithAddress(cmdobj.Address.ToString());
          if (targetmodule.Get().Instance != null)
          {
            string command = cmdobj.Command.ToString();
            switch (command)
            {
              case "Module.Describe":
              var modinstance = targetmodule.Get().Instance;
              MqttClient.Publish(clientid + "/" + modinstance.Domain + "/" + modinstance.Address + "/description", Utility.Module2Json(modinstance, false));
              break;
              default:
              targetmodule.Command(command).Execute();
              break;
            }
          }
        }
        break;
        case "description":
        if (cid != clientid &amp;&amp; module.Instance != null)
        {
          var modobj = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;Module&gt;(mpayload);
          module.Instance.Name = modobj.Name;
          module.Instance.Description = modobj.Description;
          module.Instance.DeviceType = modobj.DeviceType;
          var parentid = module.Parameter("VirtualModule.ParentId").Value;
          module.Instance.Properties = modobj.Properties;
          module.Parameter("VirtualModule.ParentId").Value = parentid;
          module.Parameter("MQTT.SourceNode").Value = cid;
          Program.Notify("MQTT", "Created remote module " + module.Instance.Domain + " " + module.Instance.Address);
        }
        break;
        case "event":
        if (cid != clientid)
        {
          var property = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;ModuleParameter&gt;(mpayload);
          if (module.Instance == null)
          {
            Program.AddVirtualModule("MQTT:" + cid + "." + domain, address, "Sensor", "");
            module = Modules.InDomain("MQTT:" + cid + "." + domain).WithAddress(address).Get();
          }
          else if (!module.HasParameter("MQTT.SourceNode"))
          {
            MqttClient.Publish(clientid + "/MQTT.Listeners/" + cid + "/command", "{ 'Domain': " + "'" + domain + "', 'Address' : '" + address + "', 'Command' : 'Module.Describe' }");         
          }
          Program.RaiseEvent(module, property.Name, property.Value, "");
        }
        break;
      }
    } catch (Exception e) {
      Program.Notify("MQTT ERROR!", e.Message);
      MqttIsConnected = false;
    }
  }
  //Console.WriteLine("MQTT {0} : {1}", mtopic, mpayload);
});

When.WebServiceCallReceived("MQTT:", ( args ) =&gt; {
  string[] reqs = ((string)args).Split('/');
  string domain = reqs[0];
  string address = reqs[1];
  var commands = new List&lt;string&gt;(reqs);
  // remove domain and address to obtain the command parts only
  commands.RemoveAt(0); commands.RemoveAt(0);
  string command = String.Join("/", commands.ToArray());
  try
  {
    int mqttend = domain.IndexOf(".");
    int mqttdel = domain.IndexOf(":");
    var mqttdest  = domain.Substring(mqttdel + 1, mqttend - mqttdel - 1);
    domain = domain.Substring(mqttend + 1);
    MqttClient.Publish(clientid + "/MQTT.Listeners/" + mqttdest + "/command", "{ 'Domain': " + "'" + domain + "', 'Address' : '" + address + "', 'Command' : '" + command + "' }");         
    return "{ 'ResponseValue' : 'OK' }";   
  } catch (Exception e) {
    Program.Notify("MQTT ERROR!", e.Message);
    MqttIsConnected = false;
  }
  return "{ 'ResponseValue' : 'ERROR' }";
});

// We want to do further processing whenever a module changes
When.ModuleParameterChanged( (module, property) =&gt; {
  if (module.HasFeature("MQTT.SensorPublish") &amp;&amp; (property.Name.StartsWith("Sensor.") || property.Name.StartsWith("Status.") || property.Name.StartsWith("Meter.")) &amp;&amp; !module.Instance.Domain.StartsWith("MQTT:"))
  {
    try{
      MqttClient.Publish(clientid + "/" + module.Instance.Domain + "/" + module.Instance.Address + "/event", Newtonsoft.Json.JsonConvert.SerializeObject(property));
    } catch  (Exception e){
      Program.Notify("MQTT ERROR!", e.Message);
      MqttIsConnected = false;
    }
  }
  // returning true, will route event to other listeners
  return true;
});

while (Program.IsRunning &amp;&amp; MqttIsConnected) Pause(1);</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>77</Address>
    <Name>MQTT Network</Name>
    <Description>Publish modules over an MQTT network.
This is similar to "events forwarding" programs, used for connecting homegenie servers each other, but it relays on an external MQTT service (http://mosquitto.org/).
To publish a module over the MQTT network, activate "Publish module on MQTT" option on it. 
Other HomeGenie servers will automatically discover the published module once an event is generated from it.
Supports full control/scripting of remote modules, just like a standard local module.</Description>
    <Group>Interconnections</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{
  Program.AddFeature(
    "HomeAutomation.PhilipsHue",
    "Dimmer",
    "Scenarios.SunriseColors",
    "Link to Sunrise Colors Scenario",
    "checkbox");
  Program.UseWidget("homegenie/generic/program");
});</ScriptCondition>
    <ScriptSource>// CSharp Automation Program Plugin

// Initialize scenario
var colorLights = Modules.WithFeature("Scenarios.SunriseColors")
  .Off()
  .Command("Control.ColorHsb");

// First transition to red, 5 seconds
colorLights.Set("0,1,.8,5");
Pause(5);

// Second transition to orange, 5 seconds
colorLights.Set("0.08,1,.8,5");
Pause(5);

// Last transition to bright white, 10 seconds
colorLights.Set("0.13,0,1,10");
Pause(10);</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>8</Address>
    <Name>Sunrise Colors Scenario</Name>
    <Description>Example scenario for Philips Hue lights.</Description>
    <Group>Scenes</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>HomeAutomation.PhilipsHue</ForDomains>
        <ForTypes>Dimmer</ForTypes>
        <Property>Scenarios.SunriseColors</Property>
        <Description>Link to Sunrise Colors Scenario</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("ThermostatsCount", "1", "Virtual thermostats modules to create", "text");
Program.AddFeature("HomeAutomation.BasicThermostat", "Thermostat", "VirtualThermostat.TemperatureModule", "Module to read temperature from", "module.text:any:any:sensor.temperature");
Program.AddFeature("HomeAutomation.BasicThermostat", "Thermostat", "VirtualThermostat.SwitchModule", "Module to switch on/off on set point", "module.text:any:switch,light,dimmer,thermostat,shutter:any");
Program.Run();
</ScriptCondition>
    <ScriptSource>const int HOLDING_MODE_DIFF = 1;
const string MODULES_DOMAIN = "HomeAutomation.BasicThermostat";
const string PARAMETER_TEMPERATURE_MODULE = "VirtualThermostat.TemperatureModule";
const string PARAMETER_SWITCH_MODULE = "VirtualThermostat.SwitchModule";
const string EVENT_DESCRIPTION = "Basic Thermostat";

var thermostatsCount = (int)Program.Option("ThermostatsCount").DecimalValue;
if (thermostatsCount &lt;= 0) thermostatsCount = 1;
Program.AddVirtualModules(MODULES_DOMAIN, "Thermostat", "homegenie/generic/thermostat", 1, thermostatsCount);
var thermostatModules = Modules.InDomain(MODULES_DOMAIN).OfDeviceType("Thermostat");

var holdingMode = new bool[thermostatsCount];

var ThermostatLogicRun = new Func&lt;ModuleHelper, bool&gt;((thermostat)=&gt;{

  var temperature = thermostat.Parameter("Sensor.Temperature");
  var operatingState = thermostat.Parameter("Thermostat.OperatingState");
  var thermostatMode = thermostat.Parameter("Thermostat.Mode");
  var heatSetPoint = thermostat.Parameter("Thermostat.SetPoint.Heating");
  var index = int.Parse(thermostat.Instance.Address) - 1;
  string domainAddress = "";
  string domain = "";
  string address = "";

  try
  {
    // Get a reference to the temperature module
    domainAddress = thermostat.Parameter(PARAMETER_TEMPERATURE_MODULE).Value;
    if (domainAddress != "" &amp;&amp; domainAddress.LastIndexOf(":") &gt; 0)
    {
      domain = domainAddress.Substring(0, domainAddress.LastIndexOf(":"));
      address = domainAddress.Substring(domainAddress.LastIndexOf(":") + 1);
    }
    var temperatureModule = Modules.InDomain(domain).WithAddress(address).Get();
    if (String.IsNullOrWhiteSpace(domain) || String.IsNullOrWhiteSpace(address) || temperatureModule.Instance == null)
    {
      Program.RaiseEvent(thermostat, "Thermostat.OperatingState", "Idle", EVENT_DESCRIPTION);
      Program.Notify("Basic Thermostat " + thermostat.Instance.Address, "Please specify a valid temperature module.");
      return false;
    }
    // Update Thermostat module Temperature field
    temperature.Value = temperatureModule.Parameter("Sensor.Temperature").Value;

    // get a reference to the switch/relay module
    domain = address = "";
    domainAddress = thermostat.Parameter(PARAMETER_SWITCH_MODULE).Value;
    if (domainAddress != "" &amp;&amp; domainAddress.LastIndexOf(":") &gt; 0)
    {
      domain = domainAddress.Substring(0, domainAddress.LastIndexOf(":"));
      address = domainAddress.Substring(domainAddress.LastIndexOf(":") + 1);
    }
    var switchModule = Modules.InDomain(domain).WithAddress(address).Get();
    if (String.IsNullOrWhiteSpace(domain) || String.IsNullOrWhiteSpace(address) || switchModule.Instance == null)
    {
      Program.RaiseEvent(thermostat, "Thermostat.OperatingState", "Idle", EVENT_DESCRIPTION);
      Program.Notify("Basic Thermostat " + thermostat.Instance.Address, "Please specify a valid switch module.");
      return false;
    }

    // Heat Mode logic
    if (thermostatMode.Value == "Heat")
    {
      if (temperature.DecimalValue &lt; heatSetPoint.DecimalValue - (holdingMode[index] ? HOLDING_MODE_DIFF : 0))
      {
        if (switchModule.IsOff) holdingMode[index] = false;
        if (operatingState.Value != "Heating")
        {
          Program.RaiseEvent(thermostat, "Thermostat.OperatingState", "Heating", EVENT_DESCRIPTION);
        }
        // Heating
        switchModule.On();
      }
      else
      {
        if (switchModule.IsOn) holdingMode[index] = true;
        if (operatingState.Value != "PendingHeat")
        {
          Program.RaiseEvent(thermostat, "Thermostat.OperatingState", "PendingHeat", EVENT_DESCRIPTION);
        }
        // Waiting
        switchModule.Off();
      }
    }
    else
    {
      if (operatingState.Value != "Off" &amp;&amp; operatingState.Value != "Idle")
      {
        Program.RaiseEvent(thermostat, "Thermostat.OperatingState", "Idle", EVENT_DESCRIPTION);
        holdingMode[index] = false;
      }
      // Off
      switchModule.Off();
    }  
  } 
  catch (Exception e) 
  {
    Program.Notify("Basic Thermostat " + thermostat.Instance.Address, "ERROR: " + e.Message);
  }

  return true;
});

When.ModuleParameterChanged((module, parameter)=&gt;{
  if (parameter.Is("Sensor.Temperature"))
  {
    thermostatModules.Each((thermostat)=&gt;{
      var domainAddress = thermostat.Parameter(PARAMETER_TEMPERATURE_MODULE).Value;
      if (domainAddress != "" &amp;&amp; domainAddress.IndexOf(":") &gt; 0)
      {
        var separatorIndex = domainAddress.LastIndexOf(':');
        if (separatorIndex &gt; 0) 
        {
          var domain = domainAddress.Substring(0, separatorIndex).ToLower();
          var address = domainAddress.Substring(separatorIndex + 1).ToLower();
          if (module.Instance.Domain.ToLower() == domain &amp;&amp; module.Instance.Address.ToLower() == address)
          {
            Program.RaiseEvent(thermostat, "Sensor.Temperature", parameter.Value, EVENT_DESCRIPTION);
            ThermostatLogicRun(thermostat);
          }
        }
      }
      return false;
    });
  }
  return true;
});

// implement Web API calls as defined in the Thermostat widget
When.WebServiceCallReceived(MODULES_DOMAIN, (args)=&gt;{
  var res = "ERROR";
  var cmdArgs = args.ToString().Split('/');
  var address = cmdArgs[1];
  var command = cmdArgs[2];
  var option = cmdArgs[3];
  var thermostat = Modules.InDomain(MODULES_DOMAIN).WithAddress(address).Get();
  var index = int.Parse(thermostat.Instance.Address) - 1;
  switch (command)
  {
    case "Thermostat.SetPointSet":
    // Basic thermostat currently only supports Heating mode
    if (option == "Heating")
    {
      var setPoint = cmdArgs[4];
      Program.RaiseEvent(thermostat, "Thermostat.SetPoint.Heating", setPoint, EVENT_DESCRIPTION);
      holdingMode[index] = false;
      ThermostatLogicRun(thermostat);
      res = "OK";
    }
    break;
    case "Thermostat.ModeSet":
    // Currently supported modes are Off or Heat
    if (option == "Off" || option == "Heat")
    {
      Program.RaiseEvent(thermostat, "Thermostat.Mode", option, EVENT_DESCRIPTION);
      holdingMode[index] = false;
      ThermostatLogicRun(thermostat);
      res = "OK";
    }
    break;
  }
  return "[{ \"ResponseValue\" : " + res + "}]";
});

while (Program.IsEnabled)
{
  thermostatModules.Each((thermostat)=&gt;{
    ThermostatLogicRun(thermostat);
    return false;
  });
  Pause(120);
}</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>78</Address>
    <Name>Basic Thermostat</Name>
    <Description>Use any temperature sensor and relay switch module to implement Thermostat device logic.
Temperature/Switch modules must be specified in the form &lt;i&gt;&amp;lt;domain&amp;gt:&amp;lt;address&amp;gt;&lt;/i&gt;, eg: HomeAutomation.ZWave:5 .
Basic Thermostats can also be used with the Timetable scheduler widget.</Description>
    <Group>Weather and Environment</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("PollInterval", "120", "Poll Interval (seconds)", "text");
//Program.AddFeature("HomeAutomation.ZWave", "Thermostat", "HomeGenie.ZWaveLevelPoll", "Poll module level", "checkbox");
Program.Run();
</ScriptCondition>
    <ScriptSource>while (Program.IsEnabled)
{
  // basic get will returns current device level 
  Modules.InDomain("HomeAutomation.ZWave").OfDeviceType("Thermostat").Each((module) =&gt; {
    Program.Notify("Z-Wave Thermostat Poll", "Polling thermostat " + module.Instance.Address + "&lt;br&gt;" + module.Instance.Name);
    module.Command("SensorMultiLevel.Get").Execute();
    Pause(Program.Option("PollInterval").DecimalValue);
    return false; // do not break, continue iterating...
  });
  // pause between each poll
  var pause = Program.Option("PollInterval").DecimalValue;
  if (pause &lt; 15)
  {
    pause = 15;
    Program.Notify("Z-Wave Thermostat Poll", "Poll interval seconds must be &gt;= 15!");
  }
  Pause(pause);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>92</Address>
    <Name>Z-Wave Thermostat Poll</Name>
    <Description />
    <Group>Z-Wave</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("PollInterval", "45", "Poll Interval (seconds)", "text");
Program.AddFeature("HomeAutomation.ZWave", "Light,Dimmer,Switch,Sensor", "HomeGenie.ZWaveMeterPoll", "Poll meter Watt", "checkbox");
Program.Run();
</ScriptCondition>
    <ScriptSource>while (Program.IsEnabled)
{
  // basic get will returns current device level 
  Modules.WithFeature("HomeGenie.ZWaveMeterPoll").Each((module) =&gt; {
    //Program.Notify("Z-Wave Level Poll", "Polling node " + module.Instance.Address + "&lt;br&gt;" + module.Instance.Name);
    module.Command("Meter.Get").Execute("2");
    return false; // do not break, continue iterating...
  });
  // pause between each poll
  var delay = Program.Option("PollInterval").DecimalValue;
  if (delay &lt; 5) delay = 5;
  Pause(delay);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>40</Address>
    <Name>Meter Watt Poll</Name>
    <Description>Periodically reads instant Watt value from meter devices</Description>
    <Group>Z-Wave</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>HomeAutomation.ZWave</ForDomains>
        <ForTypes>Light,Dimmer,Switch,Sensor</ForTypes>
        <Property>HomeGenie.ZWaveMeterPoll</Property>
        <Description>Poll meter Watt</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.UseWidget("homegenie/generic/timetable");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.Weekend", "Timetable to use for weekend", "timetable");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.Workday", "Timetable to use for workday", "timetable");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.Holiday", "Timetable to use for holiday", "timetable");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.Special", "Timetable to use for special day", "timetable");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.Enable", "Enable Timetable scheduling", "checkbox");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.Repeat", "Repeat command for the whole duration", "checkbox");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.CheckDST", "Enable Day Light Saving check", "checkbox");
// Initialize Calendar if not already defined
var calendarSettings = Program.Store("Calendar").Get("Days");
while (calendarSettings.Value.Length &lt; 366) calendarSettings.Value += '0';
if (calendarSettings.Value[0] == '0')
  calendarSettings.Value = "2" + calendarSettings.Value.Substring(1); // first of the year marked as holiday (2)
Program.Run();
</ScriptCondition>
    <ScriptSource>// HomeGenie Timetable Widget
// based on "Table Horaire"" widget idea by Daniel Maillard
var MODULE_DOMAIN = "HomeAutomation.HomeGenie";
var MODULE_ADDRESS = "Timetable";

var programsCount = 10;
var timeResolution = 5d;
var tableLength = (int)((24 * 60) / timeResolution);
var tablePrefix = "Settings.";
var timetableModules = Modules.WithFeature("TimeTable.Enable");

var GetTableType = new Func&lt;ModuleHelper, string&gt;((module)=&gt;{
    // determine table type
    var tableType = "OnOff";
    if (module.IsOfDeviceType("Shutter,Dimmer"))
    {
      tableType = "Level";
    }
    else if (module.IsOfDeviceType("Thermostat"))
    {
      tableType = "Therm";
    }
  	return tableType;
});

var GetTableSettings = new Func&lt;string, ModuleParameter&gt;((table)=&gt;{
  var settingPath = tablePrefix + table;
  var setting = Program.Store("Tables").Get(settingPath);
  // corrupted data check 
  if (!setting.Value.All(char.IsLetterOrDigit))
    setting.Value = "";
  while (setting.Value.Length &lt; tableLength) setting.Value += "0";
  setting.Value = setting.Value.Substring(0, tableLength);
  return setting;
});

// GetTableOptions Settings.Options.0
var GetTableOptions = new Func&lt;string, dynamic&gt;((tableIndex)=&gt;{
  dynamic options = new ExpandoObject();
  // default options
  options.Disable = false;
  options.DisableTimeRange = "";
  options.AutoOff = new ExpandoObject();
  options.AutoOff.WhenArmedAway = false;
  options.AutoOff.WhenArmedHome = false;
  options.AutoOff.WhenInTimeRange = false;
  options.AutoOff.TimeRange = "";
  options.AutoOff.WhenNoMotion = false;
  options.AutoOff.MotionTimeout = 60;
  options.AutoOff.MotionSensor = "";
  // try reading actual values
  var topts = Program.Store("Tables").Get(tablePrefix+"Options."+tableIndex);
  try { options = JObject.Parse(topts.Value); } catch { }
  return options;
});
var SetTableOptions = new Action&lt;string, string&gt;((tableIndex, jsonOptions)=&gt;{
  var topts = Program.Store("Tables").Get(tablePrefix+"Options."+tableIndex);
  topts.Value = jsonOptions;
});

var GetTableIndex = new Func&lt;ModuleHelper, DateTime, int&gt;((module, date) =&gt; {
  // calculate current day of year as interval from 0 to 365 (non-leap year normalized)
  var dayIndex = date.DayOfYear - 1;
  // normalize if not leap year
  if (!DateTime.IsLeapYear(date.Year) &amp;&amp; date.Month &gt; 2) dayIndex++;
  var isWeekend = (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday);
  // Get day type from Calendar (Weekday, Weekend, Holiday, Special)
  // and select Timetable table to be used
  var tableIndex = 0d; // 0 stand for not used, accepted values are 1 to 10
  bool isHoliday = false, isWorkday = false, isSpecial = false;
  var calendar = Program.Store("Calendar").Get("Days");
  var dayType = calendar.Value[dayIndex];
  switch (dayType)
  {
    case '0':
    if (!isWeekend) isWorkday = true;
    break;
    case '1':
    isWorkday = true;
    break;
    case '2':
    isHoliday = true;
    break;
    case '3':
    isSpecial = true;
    break;
  }
  if (isWorkday) 
  {
    tableIndex = module.Parameter("TimeTable.Workday").DecimalValue;
  }
  else if (isHoliday) 
  {
    tableIndex = module.Parameter("TimeTable.Holiday").DecimalValue;
  }
  else if (isSpecial) 
  {
    tableIndex = module.Parameter("TimeTable.Special").DecimalValue;
  }
  else if (isWeekend) 
  {
    tableIndex = module.Parameter("TimeTable.Weekend").DecimalValue;
  }
  return (int)tableIndex;
});

var GetDomainAddress = new Func&lt;string, dynamic&gt;((domainAddress)=&gt;{
  dynamic v = new ExpandoObject();
  v.Domain = "0";
  v.Address = "0";
  if (domainAddress.IndexOf(":") &gt; 0)
  {
    v.Domain = domainAddress.Substring(0, domainAddress.LastIndexOf(':'));
    v.Address = domainAddress.Substring(domainAddress.LastIndexOf(':') + 1);
  }
  return v;
});

var GetClosestEvent = new Func&lt;ModuleParameter, DateTime, DateTime&gt;((parameter, date)=&gt;{
  var closestTimestamp = DateTime.Now;
  var hist = parameter.Statistics.History;
  if (hist.Count &gt; 0)
  {
    try
    {
      var closest = hist[hist.Count-1];
      for(int p = hist.Count-1; p &gt;= 0; p--)
      {
        if (date &lt;= hist[p].Timestamp.ToLocalTime())
        {
          break;
        }
        closest = hist[p];
      }
      closestTimestamp = closest.Timestamp.ToLocalTime();
    } catch { }
  }
  return closestTimestamp;
});

var IsTableDisabled = new Func&lt;dynamic, DateTime, bool&gt;((tableOptions, date)=&gt;{
  var disabled = false;
  if (tableOptions.Disable == true &amp;&amp; tableOptions.DisableTimeRange == "")
    disabled = true;
  else if (tableOptions.Disable == true &amp;&amp; tableOptions.DisableTimeRange != "" &amp;&amp; Scheduler.IsOccurence(date, tableOptions.DisableTimeRange.ToString()))
    disabled = true;
  return disabled;
});

var MatchAutoOffOptions = new Func&lt;dynamic, DateTime, bool&gt;((tableOptions, date)=&gt;{
  bool autoOff = false;
  if (tableOptions.AutoOff.WhenArmedAway == true || tableOptions.AutoOff.WhenArmedHome == true)
  {
    var securityAlarm = Program.WithAddress(90);
    if (securityAlarm != null &amp;&amp; securityAlarm.IsEnabled)
    {
      var armedStatus = securityAlarm.Parameter("HomeGenie.SecurityArmed");
      if (tableOptions.AutoOff.WhenArmedAway == true &amp;&amp; armedStatus.Value == "Away")
        autoOff = true;
      if (tableOptions.AutoOff.WhenArmedHome == true &amp;&amp; armedStatus.Value == "Home")
        autoOff = true;
    }
  }
  if (!autoOff &amp;&amp; tableOptions.AutoOff.WhenInTimeRange == true &amp;&amp; tableOptions.AutoOff.TimeRange != "")
  {
    autoOff = Scheduler.IsOccurence(date, tableOptions.AutoOff.TimeRange.ToString());
  }
  if (!autoOff &amp;&amp; tableOptions.AutoOff.WhenNoMotion == true)
  {
    var mda = GetDomainAddress(tableOptions.AutoOff.MotionSensor.ToString());
    var module = Modules.InDomain(mda.Domain).WithAddress(mda.Address).Get();
    if (module.Instance != null)
    {
      var lastMotion = DateTime.Now;
      if (module.HasParameter("Sensor.MotionDetect"))
        lastMotion = GetClosestEvent(module.Parameter("Sensor.MotionDetect"), date);
      else if (module.HasParameter("Status.Level"))
        lastMotion = GetClosestEvent(module.Parameter("Status.Level"), date);
      if ((date-lastMotion).TotalMinutes &gt;= (int)tableOptions.AutoOff.MotionTimeout)
        autoOff = true;
    }
  }
  return autoOff;
});

var GetTableSliceAction = new Func&lt;int, string, string, DateTime, ExpandoObject&gt;((tableIndex, tableType, tableSuffix, date)=&gt;{
  dynamic action = new ExpandoObject();
  action.TableIndex = tableIndex;
  action.Index = (int)Math.Floor((date - date.Date).TotalMinutes / timeResolution);
  action.Date = date;
  action.Value = null; // no action
  // table index == 0 =&gt; no table associated, values go from 1 to 10
  if (action.TableIndex &gt; 0)
  {
      // tables are stored as zero-indexed (0 to 9)
      action.TableOptions = GetTableOptions((action.TableIndex - 1).ToString());
	  action.Table = GetTableSettings(tableType + "." + (action.TableIndex - 1) + tableSuffix);
      if (!IsTableDisabled(action.TableOptions, date))
      {
        // default action to "Off"
        action.Value = '0';
        // check table options constraint
        if (!MatchAutoOffOptions(action.TableOptions, date))
          action.Value = action.Table.Value[action.Index];
      }
  }
  return action;
});

var GetModuleAction = new Func&lt;ModuleHelper, string, string, DateTime, ExpandoObject&gt;((module, tableType, tableSuffix, date)=&gt;{

  // current action value
  dynamic action = GetTableSliceAction(GetTableIndex(module, date), tableType, tableSuffix, date);
  // previous action value (it might be a different table when crossing midnight)
  double minuteDiff = ((date.Minute+(date.Second/60d))%timeResolution);
  if (minuteDiff == 0) minuteDiff = timeResolution;
  var previousDate = date.AddMinutes(-minuteDiff);
  action.Previous = GetTableSliceAction(GetTableIndex(module, previousDate), tableType, tableSuffix, previousDate);

  //MigService.Log.Info(JsonConvert.SerializeObject(action));
  return action;
});

var PerformAction = new Func&lt;ModuleHelper, string, dynamic, bool, bool&gt;((module, tableType, action, forceRepeat) =&gt;{
  bool performed = false;
  bool repeat = module.HasFeature("TimeTable.Repeat") || forceRepeat;
  bool externalControl = module.HasFeature("TimeTable.ExternalControl");
  switch (tableType)  
  {
    case "OnOff":
      if (action.Value == '1' &amp;&amp; (action.Previous.Value == '0' || repeat))
      {
        module.Parameter("TimeTable.Status").Value = "ON";
        if (!externalControl)
        {
          Program.Notify("Timetable", module.Instance.Name + " ON");
          module.On();
          performed = true;
        }
      }
      else if (action.Value == '0' &amp;&amp; (action.Previous.Value == '1' || repeat))
      {
        module.Parameter("TimeTable.Status").Value = "OFF";
        if (!externalControl)
        {
          Program.Notify("Timetable", module.Instance.Name + " OFF");
          module.Off();
          performed = true;
        }
      }
      break;
	case "Level":
      // Level values are '0' = Off, '1' = 10%, '2' = 20%, ..., '9' = 90%, 'A' = 100%, 'B' = On
      if (action.Value == 'B' &amp;&amp; (action.Previous.Value != action.Value || repeat))
      {
        module.Parameter("TimeTable.Status").Value = "ON";
        if (!externalControl)
        {
          Program.Notify("Timetable", module.Instance.Name + " ON");
          module.On();
          performed = true;
        }
      }
      else if (action.Value != '0' &amp;&amp; (action.Previous.Value != action.Value || repeat))
      {
        var level = ((int)action.Value - 48);
        if (action.Value == 'A') level = 10;
        module.Parameter("TimeTable.Status").Value = (level * 10).ToString();
        if (!externalControl)
        {
          Program.Notify("Timetable", module.Instance.Name + " Level " + (level * 10) + "%");
          module.Level = level * 10;
          performed = true;
        }
      }
      else if (action.Value == '0' &amp;&amp; (action.Previous.Value != action.Value || repeat))
      {
        module.Parameter("TimeTable.Status").Value = "OFF";
        if (!externalControl)
        {
          Program.Notify("Timetable", module.Instance.Name + " OFF");
          module.Off();
          performed = true;
        }
      }
      break;
    case "Therm":
      var command = module.Command("Thermostat.ModeSet");
      if (action.Value != action.Previous.Value || repeat)
      switch ((char)action.Value)
      {
        case '0':
          Program.Notify("Timetable", module.Instance.Name + " OFF");
          command.Execute("Off");
	      performed = true;
          break;
        case '1':
          Program.Notify("Timetable", module.Instance.Name + " Heat");
          command.Execute("Heat");
	      performed = true;
          break;
        case '2':
          Program.Notify("Timetable", module.Instance.Name + " Cool");
          command.Execute("Cool");
	      performed = true;
          break;
        case '3':
          Program.Notify("Timetable", module.Instance.Name + " Auto");
          command.Execute("Auto");
	      performed = true;
          break;
        case '4':
          Program.Notify("Timetable", module.Instance.Name + " FanOnly");
          command.Execute("FanOnly");
	      performed = true;
          break;
        case '5':
          Program.Notify("Timetable", module.Instance.Name + " AutoChangeover");
          command.Execute("AutoChangeover");
	      performed = true;
          break;
        case '6':
          Program.Notify("Timetable", module.Instance.Name + " HeatEconomy");
          command.Execute("HeatEconomy");
	      performed = true;
          break;
        case '7':
          Program.Notify("Timetable", module.Instance.Name + " CoolEconomy");
          command.Execute("CoolEconomy");
	      performed = true;
          break;
        case '8':
          Program.Notify("Timetable", module.Instance.Name + " Away");
          command.Execute("Away");
	      performed = true;
          break;
      }
      break;
  }
  return performed;
});

var CheckScheduling = new Action&lt;DateTime, int,bool&gt;((date, tableIndex, forceRepeat)=&gt;{
  // if tableIndex == 0, check all tables, otherwise check the given table only (1-10)
  timetableModules.Each((module)=&gt;{
    
    // determine table type
    var tableType = GetTableType(module);    
    // Day Light Saving check
    var tableSuffix = "";
    if (TimeZoneInfo.Local.IsDaylightSavingTime(date) &amp;&amp; module.HasFeature("TimeTable.CheckDST"))
       tableSuffix = ".DST";
    
    // Get action for current module
    dynamic action = GetModuleAction(module, tableType, tableSuffix, date);
    // perform action
    if (action.Value != null &amp;&amp; (tableIndex == 0 || tableIndex == action.TableIndex) &amp;&amp; PerformAction(module, tableType, action, forceRepeat))
    {
      Program.Notify("Timetable", "Performed action from table '" + tableType + "' #" + action.TableIndex + tableSuffix);
    }

    return false; // do not stop iterating, continue processing next module
  });  
});

When.WebServiceCallReceived(MODULE_DOMAIN + "/" + MODULE_ADDRESS, (args)=&gt;{
  var request = args.ToString().Split('/');
  var response = "ERROR";
  var command = request[2];
  ModuleParameter setting = null;
  switch (command)
  {
    case "Calendar.Get":
      response = Program.Store("Calendar").Get("Days").Value;
      break;
    case "Calendar.Set":
      Program.Store("Calendar").Get("Days").Value = request[3];
      CheckScheduling(DateTime.Now, 0, false);
      response = "OK";
      break;
    case "Timetable.Set":
      setting = GetTableSettings(request[3]);
      var slotFrom = int.Parse(request[4]);
      var slotTo = int.Parse(request[5]);
      var slotValue = request[6];
      var slotRangeStart = int.Parse(request[7]);
      var slotRangeEnd = int.Parse(request[8]);
      var newValue = new System.Text.StringBuilder(setting.Value);
      newValue.Remove(slotFrom, slotTo - slotFrom);
      newValue.Insert(slotFrom, new String(slotValue.ToString()[0], slotTo - slotFrom));
      if (slotRangeStart &lt; slotFrom &amp;&amp; setting.Value[slotRangeStart] == slotValue.ToString()[0])
      {
        newValue.Remove(slotRangeStart, slotFrom - slotRangeStart);
        newValue.Insert(slotRangeStart, new String('0', slotFrom - slotRangeStart));
      }
      if (slotRangeEnd &gt; slotTo &amp;&amp; setting.Value[slotRangeEnd - 1] == slotValue.ToString()[0])
      {
        newValue.Remove(slotTo, slotRangeEnd - slotTo);
        newValue.Insert(slotTo, new String('0', slotRangeEnd - slotTo));
      }
      setting.Value = newValue.ToString();
      var tidx = int.Parse(request[3].Substring(request[3].IndexOf(".")+1));
      CheckScheduling(DateTime.Now, tidx+1, false);
      response = "OK";
      break;
    case "Timetable.Get":
      setting = GetTableSettings(request[3]);
      response = setting.Value;
      break;
    case "Timetable.CheckNow":
      CheckScheduling(DateTime.Now, int.Parse(request[3]), false);
   	  break;
    case "Timetable.GetOptions":
      return GetTableOptions(request[3]);
    case "Timetable.SetOptions":
      SetTableOptions(request[3], Uri.UnescapeDataString(request[4]));
      response = "OK";
      break;
    case "Timetable.GetScheduling":
      var schedulingModules = new List&lt;dynamic&gt;();
      Modules.OfDeviceType("Light,Switch,Shutter,Dimmer,Thermostat").Each((mod)=&gt;{
        if (mod.HasFeature("TimeTable.Enable"))
        {
          dynamic tm = new ExpandoObject();
          tm.Domain = mod.Instance.Domain;
          tm.Address = mod.Instance.Address;
          tm.Name = mod.Instance.Name;
          tm.Type = GetTableType(mod);
          //
          var todayDate = DateTime.Now;
          var tableIndex = GetTableIndex(mod, todayDate);
          // Day Light Saving check
          var tableSuffix = "";
          if (TimeZoneInfo.Local.IsDaylightSavingTime(todayDate) &amp;&amp; mod.HasFeature("TimeTable.CheckDST"))
       		tableSuffix = ".DST";
          // Perform action on current module
          if (tableIndex &gt; 0)
          {
            var tableOptions = GetTableOptions((tableIndex - 1).ToString());
            if (!IsTableDisabled(tableOptions, todayDate))
            {
	            // tables are stored as zero indexed
    	        tm.Timetable = GetTableSettings(tm.Type + "." + (tableIndex - 1) + tableSuffix).Value;
            }
          }
          //
          schedulingModules.Add(tm);
        }
        return false;
      });
      return schedulingModules;
    case "Timetable.GetModules":
      var modules = new List&lt;dynamic&gt;();
      Modules.OfDeviceType("Light,Switch,Shutter,Dimmer,Thermostat").Each((mod)=&gt;{
        dynamic tm = new ExpandoObject();
        tm.Domain = mod.Instance.Domain;
        tm.Address = mod.Instance.Address;
        tm.Name = mod.Instance.Name;
        tm.Enabled = mod.HasFeature("TimeTable.Enable");
        tm.Workday = mod.Parameter("TimeTable.Workday").DecimalValue;
        tm.Weekend = mod.Parameter("TimeTable.Weekend").DecimalValue;
        tm.Holiday = mod.Parameter("TimeTable.Holiday").DecimalValue;
        tm.Special = mod.Parameter("TimeTable.Special").DecimalValue;
        tm.CheckDST = mod.HasFeature("TimeTable.CheckDST");
        tm.Repeat = mod.HasFeature("TimeTable.Repeat");
        tm.Type = GetTableType(mod);
        modules.Add(tm);
        return false;
      });
      return modules;
      //return JsonConvert.SerializeObject(modules, Formatting.Indented);
      //break;
  }
  return "{ \"ResponseValue\": \"" + response + "\" }";
});

// module events handling
When.ModuleParameterChanged((module, parameter)=&gt; {
  // check scheduling is security system changed status
  var date = DateTime.Now; // parameter.UpdateTime would be more accurate perhaps
  if (module.Instance.Domain == "HomeAutomation.HomeGenie.Automation" &amp;&amp; module.Instance.Address == "90" &amp;&amp; parameter.Is("HomeGenie.SecurityArmed"))
  {
    CheckScheduling(date, 0, true); // 0 = check all timetable programs
  }
  else if (parameter.Is("Status.Level") || parameter.Is("Sensor.MotionDetect"))
  {
    for (int t = 0; t &lt; programsCount; t++)
    {
      var moduleDomainAddress = module.Instance.Domain+":"+module.Instance.Address;
      var tableOptions = GetTableOptions((t).ToString());
      if (!IsTableDisabled(tableOptions, date) &amp;&amp; tableOptions.AutoOff.WhenNoMotion == true &amp;&amp; tableOptions.AutoOff.MotionSensor == moduleDomainAddress)
      {
        CheckScheduling(date, (t+1), false); // check current timetable program
      }    
    }
  }
  return true;
});

// Timetable control loop
while (Program.IsEnabled)
{
  // Current date with seconds set to 0
  var preciseDate = DateTime.Now;
  preciseDate = preciseDate.AddSeconds(-preciseDate.Second);
  // Run scheduling check
  CheckScheduling(preciseDate, 0, false); // 0 = check all timetable programs
  // Pause until next slice of time of "timeResolution" size
  var nextCheck = (Math.Floor(DateTime.Now.Minute / timeResolution) + 1) * timeResolution;
  var pause = ((nextCheck - DateTime.Now.Minute) * 60) - DateTime.Now.Second;
  Pause(pause);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>36</Address>
    <Name>Timetable</Name>
    <Description>Widget for scheduling thermostats, lights and shutters.</Description>
    <Group>Scheduling</Group>
    <Features>
      <ProgramFeature>
        <FieldType>timetable</FieldType>
        <ForDomains />
        <ForTypes>Light,Switch,Shutter,Dimmer,Thermostat</ForTypes>
        <Property>TimeTable.Weekend</Property>
        <Description>Timetable to use for weekend</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>timetable</FieldType>
        <ForDomains />
        <ForTypes>Light,Switch,Shutter,Dimmer,Thermostat</ForTypes>
        <Property>TimeTable.Workday</Property>
        <Description>Timetable to use for workday</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>timetable</FieldType>
        <ForDomains />
        <ForTypes>Light,Switch,Shutter,Dimmer,Thermostat</ForTypes>
        <Property>TimeTable.Holiday</Property>
        <Description>Timetable to use for holiday</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>timetable</FieldType>
        <ForDomains />
        <ForTypes>Light,Switch,Shutter,Dimmer,Thermostat</ForTypes>
        <Property>TimeTable.Special</Property>
        <Description>Timetable to use for special day</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Light,Switch,Shutter,Dimmer,Thermostat</ForTypes>
        <Property>TimeTable.Enable</Property>
        <Description>Enable Timetable scheduling</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Light,Switch,Shutter,Dimmer,Thermostat</ForTypes>
        <Property>TimeTable.Repeat</Property>
        <Description>Repeat command for the whole duration</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Light,Switch,Shutter,Dimmer,Thermostat</ForTypes>
        <Property>TimeTable.CheckDST</Property>
        <Description>Enable Day Light Saving check</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2016-01-22T17:32:08.184582Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("", "Switch,Light,Dimmer", "HomeGenie.IRControler.Enable", "Enable control by IR remote", "checkbox");
Program.AddFeature("", "Switch,Light,Dimmer", "HomeGenie.IRControler.IRCode", "Toggle module with IR button (enter code)", "capture:Receiver.RawData");
Program.AddOption("DimmerUpCode", "Microsoft_Xbox360/UpArrow", "1. Dimmer Up (enter IR button code)", "text");
Program.AddOption("DimmerDownCode", "Microsoft_Xbox360/DownArrow", "2. Dimmer Down (enter IR button code)", "text");
Program.AddOption("DimmerInterval", "5", "4. Dimmer Interval", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>// 
// Code adapted from: http://www.homegenie.it/forum/index.php?topic=950.0
//
// Allows adding conditional IR code for Lights, Switches and Dimmers.
// Also let you dim last light using Up/Down button which you can define in configuration
// 

var dimmerInterval = Program.Option("DimmerInterval");
var dimmerUp = Program.Option("DimmerUpCode");
var dimmerDown = Program.Option("DimmerDownCode");
var irControlModules = Modules.WithFeature("HomeGenie.IRControler.Enable");

When.ModuleParameterChanged((module, parameter) =&gt; {
  if(parameter.Name == "Receiver.RawData" )
  {
    var irData = parameter;
    var lastButton = module.Parameter("IrController.LastButton");
    if (irData.Value != "") 
    {
      if (lastButton.Value != "" &amp;&amp; (irData.Value == dimmerUp.Value || irData.Value == dimmerDown.Value)) 
      {
        irControlModules.Each((m) =&gt; {
          if (m.Parameter("HomeGenie.IRControler.IRCode").Value == lastButton.Value) 
          {
            var level = m.Level;
            if (irData.Value == dimmerUp.Value &amp;&amp; level &lt; 100) 
            {
              level += dimmerInterval.DecimalValue;
              m.Level = (level &gt; 100 ? 100 : level);
              Program.Notify("IR Remote Controller", m.Instance.Name + "&lt;br&gt;Dimmer value: " + level);
            }
            else if (irData.Value == dimmerDown.Value &amp;&amp; level &gt; dimmerInterval.DecimalValue) 
            {
              level -= dimmerInterval.DecimalValue;
              m.Level = (level &lt; dimmerInterval.DecimalValue ? dimmerInterval.DecimalValue : level);
              Program.Notify("IR Remote Controller", m.Instance.Name + "&lt;br&gt;Dimmer value: " + level);
            }
          }
          return false; // do not break, continue iterating...
        });
      }
      else
      {
        irControlModules.Each((m) =&gt; {
          if (m.Parameter("HomeGenie.IRControler.IRCode").Value == irData.Value) 
          {
            lastButton.Value = irData.Value;
            m.Toggle();
            Program.Notify("IR Remote Controller", m.Instance.Name + "&lt;br&gt;toggled.");
          }
          return false; // do not break, continue iterating...
        });
      }
    }
  }
  return true;
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>505</Address>
    <Name>IR Remote Controller</Name>
    <Description>Control module using an IR remote.
When you press the assigned remote button, it will toggle the module on/off.
Also it lets you dim last addressed module using Up/Down button which can be defined through program's configuration options.</Description>
    <Group>Lights</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.IRControler.Enable</Property>
        <Description>Enable control by IR remote</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>capture:Receiver.RawData</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.IRControler.IRCode</Property>
        <Description>Toggle module with IR button (enter code)</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2016-01-22T17:32:08.339691Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("ZoneSensors.Count", "5", "Number of Zone Sensors", "slider:1:10:1");
Program.Run();
</ScriptCondition>
    <ScriptSource>var FLD_ZONESENSORS_DOMAIN = "HomeGenie.ZoneSensors";
var FLD_ZONESENSORS_ENABLE = "HomeGenie.ZoneSensors.Enable";

var zonesCount = (int)Program.Option("ZoneSensors.Count").DecimalValue;
if (zonesCount &lt; 1) zonesCount = 1;
Program.AddVirtualModules(FLD_ZONESENSORS_DOMAIN, "Sensor", "homegenie/generic/sensor", 1, zonesCount);
Program.AddFeature("!"+FLD_ZONESENSORS_DOMAIN, "", FLD_ZONESENSORS_ENABLE, "Include in Zone Sensors", "checkbox");
for (int s = 1; s &lt;= zonesCount; s++)
{
  Program.AddFeature("!"+FLD_ZONESENSORS_DOMAIN, "", FLD_ZONESENSORS_DOMAIN+"."+s, "Zone Sensor "+s, "checkbox");
}

When.ModuleParameterChanged((module, parameter)=&gt;{
  if (module.Instance.Domain != FLD_ZONESENSORS_DOMAIN &amp;&amp; module.HasFeature(FLD_ZONESENSORS_ENABLE))
  {
    for (int s = 1; s &lt;= zonesCount; s++)
    {
      if (module.HasFeature(FLD_ZONESENSORS_DOMAIN+"."+s))
      {
        // get all module in the same sensors zone
        var zoneModule = Modules.InDomain(FLD_ZONESENSORS_DOMAIN).WithAddress(s.ToString()).Get();
		var zoneSensors = Modules.WithFeature(FLD_ZONESENSORS_DOMAIN+"."+s);
        if ((parameter.Name.StartsWith("Sensor.") || parameter.Name.StartsWith("Meter.")) &amp;&amp; !parameter.Is("Sensor.MotionDetect"))
        {
          // calculate the average value
          double avg = 0;
          double count = 0;
          zoneSensors.Each((mod)=&gt;{
            if (mod.HasFeature(FLD_ZONESENSORS_ENABLE) &amp;&amp; mod.HasParameter(parameter.Name))
            {
              avg += mod.Parameter(parameter.Name).DecimalValue;
              count++;
            }
            return false;
          });
          if (count &gt; 0)
          {
            Program.RaiseEvent(zoneModule, parameter.Name, (avg/count).ToString(CultureInfo.InvariantCulture), "Zone Sensors");
          }
        }
        else if (parameter.Name.StartsWith("Sensor.") || parameter.Name.StartsWith("Status."))
        {
          // set level to 1 if at least one module has value greater than zero
	      //Program.RaiseEvent()
          var eventValue = "0";
          zoneSensors.Each((mod)=&gt;{
            if (mod.HasFeature(FLD_ZONESENSORS_ENABLE) &amp;&amp; mod.HasParameter(parameter.Name))
            {
              if(mod.Parameter(parameter.Name).DecimalValue &gt; 0)
              {
                eventValue = "1";
                return true;
              }
            }
            return false;
          });
          Program.RaiseEvent(zoneModule, parameter.Name, eventValue, "Zone Sensors");
        }
      }
    }
  }
  return true;
});

Program.GoBackground();
</ScriptSource>
    <ScriptErrors>Program update is required.</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>29</Address>
    <Name>Zone Sensors</Name>
    <Description>Adds an arbitrary number of Zone Sensors. Each of them can group multiple sensors into one logcal sensor.
When changing the number of zone sensors, program restart is required.</Description>
    <Group>Devices and Things</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>!HomeGenie.ZoneSensors</ForDomains>
        <ForTypes />
        <Property>HomeGenie.ZoneSensors.Enable</Property>
        <Description>Include in Zone Sensors</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>!HomeGenie.ZoneSensors</ForDomains>
        <ForTypes />
        <Property>HomeGenie.ZoneSensors.1</Property>
        <Description>Zone Sensor 1</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>!HomeGenie.ZoneSensors</ForDomains>
        <ForTypes />
        <Property>HomeGenie.ZoneSensors.2</Property>
        <Description>Zone Sensor 2</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>!HomeGenie.ZoneSensors</ForDomains>
        <ForTypes />
        <Property>HomeGenie.ZoneSensors.3</Property>
        <Description>Zone Sensor 3</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>!HomeGenie.ZoneSensors</ForDomains>
        <ForTypes />
        <Property>HomeGenie.ZoneSensors.4</Property>
        <Description>Zone Sensor 4</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>!HomeGenie.ZoneSensors</ForDomains>
        <ForTypes />
        <Property>HomeGenie.ZoneSensors.5</Property>
        <Description>Zone Sensor 5</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2016-01-22T17:32:08.190372Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
</ArrayOfProgramBlock>
